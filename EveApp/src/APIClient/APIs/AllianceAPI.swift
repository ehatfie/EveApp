//
// AllianceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AllianceAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliances: String { 
        case tranquility = "tranquility"
    }

    /**
     List all alliances

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlliances(datasource: Datasource_getAlliances? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getAlliancesWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all alliances
     - GET /v1/alliances/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getAlliancesWithRequestBuilder(datasource: Datasource_getAlliances? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/alliances/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get alliance information

     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlliancesAllianceId(allianceId: Int, datasource: Datasource_getAlliancesAllianceId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetAlliancesAllianceIdOk?,_ error: Error?) -> Void)) {
        getAlliancesAllianceIdWithRequestBuilder(allianceId: allianceId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get alliance information
     - GET /v3/alliances/{alliance_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "ticker" : "ticker",
  "creator_corporation_id" : 0,
  "creator_id" : 6,
  "name" : "name",
  "faction_id" : 5,
  "date_founded" : "2000-01-23T04:56:07.000+00:00",
  "executor_corporation_id" : 1
}}]
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetAlliancesAllianceIdOk> 
     */
    open class func getAlliancesAllianceIdWithRequestBuilder(allianceId: Int, datasource: Datasource_getAlliancesAllianceId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetAlliancesAllianceIdOk> {
        var path = "/v3/alliances/{alliance_id}/"
        let allianceIdPreEscape = "\(allianceId)"
        let allianceIdPostEscape = allianceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alliance_id}", with: allianceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetAlliancesAllianceIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceIdCorporations: String { 
        case tranquility = "tranquility"
    }

    /**
     List alliance's corporations

     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlliancesAllianceIdCorporations(allianceId: Int, datasource: Datasource_getAlliancesAllianceIdCorporations? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getAlliancesAllianceIdCorporationsWithRequestBuilder(allianceId: allianceId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List alliance's corporations
     - GET /v1/alliances/{alliance_id}/corporations/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getAlliancesAllianceIdCorporationsWithRequestBuilder(allianceId: Int, datasource: Datasource_getAlliancesAllianceIdCorporations? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        var path = "/v1/alliances/{alliance_id}/corporations/"
        let allianceIdPreEscape = "\(allianceId)"
        let allianceIdPostEscape = allianceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alliance_id}", with: allianceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceIdIcons: String { 
        case tranquility = "tranquility"
    }

    /**
     Get alliance icon

     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlliancesAllianceIdIcons(allianceId: Int, datasource: Datasource_getAlliancesAllianceIdIcons? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetAlliancesAllianceIdIconsOk?,_ error: Error?) -> Void)) {
        getAlliancesAllianceIdIconsWithRequestBuilder(allianceId: allianceId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get alliance icon
     - GET /v1/alliances/{alliance_id}/icons/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "px64x64" : "px64x64",
  "px128x128" : "px128x128"
}}]
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetAlliancesAllianceIdIconsOk> 
     */
    open class func getAlliancesAllianceIdIconsWithRequestBuilder(allianceId: Int, datasource: Datasource_getAlliancesAllianceIdIcons? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetAlliancesAllianceIdIconsOk> {
        var path = "/v1/alliances/{alliance_id}/icons/"
        let allianceIdPreEscape = "\(allianceId)"
        let allianceIdPostEscape = allianceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alliance_id}", with: allianceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetAlliancesAllianceIdIconsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
