//
// BookmarksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BookmarksAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdBookmarks: String { 
        case tranquility = "tranquility"
    }

    /**
     List bookmarks

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdBookmarks(characterId: Int, datasource: Datasource_getCharactersCharacterIdBookmarks? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdBookmarks200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdBookmarksWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List bookmarks
     - GET /v2/characters/{character_id}/bookmarks/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]> 
     */
    open class func getCharactersCharacterIdBookmarksWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdBookmarks? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]> {
        var path = "/v2/characters/{character_id}/bookmarks/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdBookmarksFolders: String { 
        case tranquility = "tranquility"
    }

    /**
     List bookmark folders

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdBookmarksFolders(characterId: Int, datasource: Datasource_getCharactersCharacterIdBookmarksFolders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdBookmarksFolders200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdBookmarksFoldersWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List bookmark folders
     - GET /v2/characters/{character_id}/bookmarks/folders/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
}, {
  "name" : "name",
  "folder_id" : 0
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]> 
     */
    open class func getCharactersCharacterIdBookmarksFoldersWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdBookmarksFolders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]> {
        var path = "/v2/characters/{character_id}/bookmarks/folders/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdBookmarks: String { 
        case tranquility = "tranquility"
    }

    /**
     List corporation bookmarks

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCorporationsCorporationIdBookmarks(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBookmarks? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdBookmarks200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdBookmarksWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List corporation bookmarks
     - GET /v1/corporations/{corporation_id}/bookmarks/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
}, {
  "bookmark_id" : 0,
  "item" : {
    "item_id" : 7,
    "type_id" : 9
  },
  "notes" : "notes",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "coordinates" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "creator_id" : 5,
  "label" : "label",
  "folder_id" : 2,
  "location_id" : 3
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdBookmarks200Ok]> 
     */
    open class func getCorporationsCorporationIdBookmarksWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBookmarks? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdBookmarks200Ok]> {
        var path = "/v1/corporations/{corporation_id}/bookmarks/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdBookmarks200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdBookmarksFolders: String { 
        case tranquility = "tranquility"
    }

    /**
     List corporation bookmark folders

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCorporationsCorporationIdBookmarksFolders(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBookmarksFolders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdBookmarksFolders200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdBookmarksFoldersWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List corporation bookmark folders
     - GET /v1/corporations/{corporation_id}/bookmarks/folders/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
}, {
  "creator_id" : 0,
  "name" : "name",
  "folder_id" : 6
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdBookmarksFolders200Ok]> 
     */
    open class func getCorporationsCorporationIdBookmarksFoldersWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBookmarksFolders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdBookmarksFolders200Ok]> {
        var path = "/v1/corporations/{corporation_id}/bookmarks/folders/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdBookmarksFolders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
