//
// FittingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FittingsAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteCharactersCharacterIdFittingsFittingId: String { 
        case tranquility = "tranquility"
    }

    /**
     Delete fitting

     - parameter characterId: (path) An EVE character ID 
     - parameter fittingId: (path) ID for a fitting of this character 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCharactersCharacterIdFittingsFittingId(characterId: Int, fittingId: Int, datasource: Datasource_deleteCharactersCharacterIdFittingsFittingId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCharactersCharacterIdFittingsFittingIdWithRequestBuilder(characterId: characterId, fittingId: fittingId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete fitting
     - DELETE /v1/characters/{character_id}/fittings/{fitting_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter characterId: (path) An EVE character ID 
     - parameter fittingId: (path) ID for a fitting of this character 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCharactersCharacterIdFittingsFittingIdWithRequestBuilder(characterId: Int, fittingId: Int, datasource: Datasource_deleteCharactersCharacterIdFittingsFittingId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/characters/{character_id}/fittings/{fitting_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let fittingIdPreEscape = "\(fittingId)"
        let fittingIdPostEscape = fittingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fitting_id}", with: fittingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdFittings: String { 
        case tranquility = "tranquility"
    }

    /**
     Get fittings

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdFittings(characterId: Int, datasource: Datasource_getCharactersCharacterIdFittings? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdFittings200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdFittingsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get fittings
     - GET /v2/characters/{character_id}/fittings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
}, {
  "fitting_id" : 0,
  "ship_type_id" : 5,
  "name" : "name",
  "description" : "description",
  "items" : [ {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  }, {
    "flag" : "Cargo",
    "quantity" : 6,
    "type_id" : 1
  } ]
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdFittings200Ok]> 
     */
    open class func getCharactersCharacterIdFittingsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdFittings? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdFittings200Ok]> {
        var path = "/v2/characters/{character_id}/fittings/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdFittings200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdFittings: String { 
        case tranquility = "tranquility"
    }

    /**
     Create fitting

     - parameter body: (body) Details about the new fitting 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCharactersCharacterIdFittings(body: PostCharactersCharacterIdFittingsFitting, characterId: Int, datasource: Datasource_postCharactersCharacterIdFittings? = nil, token: String? = nil, completion: @escaping ((_ data: PostCharactersCharacterIdFittingsCreated?,_ error: Error?) -> Void)) {
        postCharactersCharacterIdFittingsWithRequestBuilder(body: body, characterId: characterId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create fitting
     - POST /v2/characters/{character_id}/fittings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example={
  "fitting_id" : 0
}}]
     - parameter body: (body) Details about the new fitting 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<PostCharactersCharacterIdFittingsCreated> 
     */
    open class func postCharactersCharacterIdFittingsWithRequestBuilder(body: PostCharactersCharacterIdFittingsFitting, characterId: Int, datasource: Datasource_postCharactersCharacterIdFittings? = nil, token: String? = nil) -> RequestBuilder<PostCharactersCharacterIdFittingsCreated> {
        var path = "/v2/characters/{character_id}/fittings/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<PostCharactersCharacterIdFittingsCreated>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
