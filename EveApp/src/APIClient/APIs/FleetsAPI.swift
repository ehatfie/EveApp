//
// FleetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FleetsAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteFleetsFleetIdMembersMemberId: String { 
        case tranquility = "tranquility"
    }

    /**
     Kick fleet member

     - parameter fleetId: (path) ID for a fleet 
     - parameter memberId: (path) The character ID of a member in this fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFleetsFleetIdMembersMemberId(fleetId: Int64, memberId: Int, datasource: Datasource_deleteFleetsFleetIdMembersMemberId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFleetsFleetIdMembersMemberIdWithRequestBuilder(fleetId: fleetId, memberId: memberId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Kick fleet member
     - DELETE /v1/fleets/{fleet_id}/members/{member_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter fleetId: (path) ID for a fleet 
     - parameter memberId: (path) The character ID of a member in this fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFleetsFleetIdMembersMemberIdWithRequestBuilder(fleetId: Int64, memberId: Int, datasource: Datasource_deleteFleetsFleetIdMembersMemberId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/members/{member_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{member_id}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteFleetsFleetIdSquadsSquadId: String { 
        case tranquility = "tranquility"
    }

    /**
     Delete fleet squad

     - parameter fleetId: (path) ID for a fleet 
     - parameter squadId: (path) The squad to delete 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFleetsFleetIdSquadsSquadId(fleetId: Int64, squadId: Int64, datasource: Datasource_deleteFleetsFleetIdSquadsSquadId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFleetsFleetIdSquadsSquadIdWithRequestBuilder(fleetId: fleetId, squadId: squadId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete fleet squad
     - DELETE /v1/fleets/{fleet_id}/squads/{squad_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter fleetId: (path) ID for a fleet 
     - parameter squadId: (path) The squad to delete 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFleetsFleetIdSquadsSquadIdWithRequestBuilder(fleetId: Int64, squadId: Int64, datasource: Datasource_deleteFleetsFleetIdSquadsSquadId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/squads/{squad_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let squadIdPreEscape = "\(squadId)"
        let squadIdPostEscape = squadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{squad_id}", with: squadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteFleetsFleetIdWingsWingId: String { 
        case tranquility = "tranquility"
    }

    /**
     Delete fleet wing

     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing to delete 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFleetsFleetIdWingsWingId(fleetId: Int64, wingId: Int64, datasource: Datasource_deleteFleetsFleetIdWingsWingId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFleetsFleetIdWingsWingIdWithRequestBuilder(fleetId: fleetId, wingId: wingId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete fleet wing
     - DELETE /v1/fleets/{fleet_id}/wings/{wing_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing to delete 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFleetsFleetIdWingsWingIdWithRequestBuilder(fleetId: Int64, wingId: Int64, datasource: Datasource_deleteFleetsFleetIdWingsWingId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/wings/{wing_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let wingIdPreEscape = "\(wingId)"
        let wingIdPostEscape = wingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{wing_id}", with: wingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdFleet: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character fleet info

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdFleet(characterId: Int, datasource: Datasource_getCharactersCharacterIdFleet? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdFleetOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdFleetWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character fleet info
     - GET /v1/characters/{character_id}/fleet/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "role" : "fleet_commander",
  "squad_id" : 6,
  "fleet_id" : 0,
  "wing_id" : 1
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdFleetOk> 
     */
    open class func getCharactersCharacterIdFleetWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdFleet? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdFleetOk> {
        var path = "/v1/characters/{character_id}/fleet/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdFleetOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getFleetsFleetId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get fleet information

     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetsFleetId(fleetId: Int64, datasource: Datasource_getFleetsFleetId? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetFleetsFleetIdOk?,_ error: Error?) -> Void)) {
        getFleetsFleetIdWithRequestBuilder(fleetId: fleetId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get fleet information
     - GET /v1/fleets/{fleet_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "motd" : "motd",
  "is_registered" : true,
  "is_free_move" : true,
  "is_voice_enabled" : true
}}]
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetFleetsFleetIdOk> 
     */
    open class func getFleetsFleetIdWithRequestBuilder(fleetId: Int64, datasource: Datasource_getFleetsFleetId? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetFleetsFleetIdOk> {
        var path = "/v1/fleets/{fleet_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetFleetsFleetIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getFleetsFleetIdMembers: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getFleetsFleetIdMembers: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getFleetsFleetIdMembers: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get fleet members

     - parameter fleetId: (path) ID for a fleet 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetsFleetIdMembers(fleetId: Int64, acceptLanguage: AcceptLanguage_getFleetsFleetIdMembers? = nil, datasource: Datasource_getFleetsFleetIdMembers? = nil, ifNoneMatch: String? = nil, language: Language_getFleetsFleetIdMembers? = nil, token: String? = nil, completion: @escaping ((_ data: [GetFleetsFleetIdMembers200Ok]?,_ error: Error?) -> Void)) {
        getFleetsFleetIdMembersWithRequestBuilder(fleetId: fleetId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get fleet members
     - GET /v1/fleets/{fleet_id}/members/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
}, {
  "role_name" : "role_name",
  "ship_type_id" : 6,
  "takes_fleet_warp" : true,
  "role" : "fleet_commander",
  "squad_id" : 5,
  "station_id" : 5,
  "solar_system_id" : 1,
  "character_id" : 0,
  "join_time" : "2000-01-23T04:56:07.000+00:00",
  "wing_id" : 2
} ]}]
     - parameter fleetId: (path) ID for a fleet 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetFleetsFleetIdMembers200Ok]> 
     */
    open class func getFleetsFleetIdMembersWithRequestBuilder(fleetId: Int64, acceptLanguage: AcceptLanguage_getFleetsFleetIdMembers? = nil, datasource: Datasource_getFleetsFleetIdMembers? = nil, ifNoneMatch: String? = nil, language: Language_getFleetsFleetIdMembers? = nil, token: String? = nil) -> RequestBuilder<[GetFleetsFleetIdMembers200Ok]> {
        var path = "/v1/fleets/{fleet_id}/members/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetFleetsFleetIdMembers200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getFleetsFleetIdWings: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getFleetsFleetIdWings: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getFleetsFleetIdWings: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get fleet wings

     - parameter fleetId: (path) ID for a fleet 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFleetsFleetIdWings(fleetId: Int64, acceptLanguage: AcceptLanguage_getFleetsFleetIdWings? = nil, datasource: Datasource_getFleetsFleetIdWings? = nil, ifNoneMatch: String? = nil, language: Language_getFleetsFleetIdWings? = nil, token: String? = nil, completion: @escaping ((_ data: [GetFleetsFleetIdWings200Ok]?,_ error: Error?) -> Void)) {
        getFleetsFleetIdWingsWithRequestBuilder(fleetId: fleetId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get fleet wings
     - GET /v1/fleets/{fleet_id}/wings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
}, {
  "squads" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "name" : "name",
  "id" : 0
} ]}]
     - parameter fleetId: (path) ID for a fleet 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetFleetsFleetIdWings200Ok]> 
     */
    open class func getFleetsFleetIdWingsWithRequestBuilder(fleetId: Int64, acceptLanguage: AcceptLanguage_getFleetsFleetIdWings? = nil, datasource: Datasource_getFleetsFleetIdWings? = nil, ifNoneMatch: String? = nil, language: Language_getFleetsFleetIdWings? = nil, token: String? = nil) -> RequestBuilder<[GetFleetsFleetIdWings200Ok]> {
        var path = "/v1/fleets/{fleet_id}/wings/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetFleetsFleetIdWings200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postFleetsFleetIdMembers: String { 
        case tranquility = "tranquility"
    }

    /**
     Create fleet invitation

     - parameter body: (body) Details of the invitation 
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFleetsFleetIdMembers(body: PostFleetsFleetIdMembersInvitation, fleetId: Int64, datasource: Datasource_postFleetsFleetIdMembers? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postFleetsFleetIdMembersWithRequestBuilder(body: body, fleetId: fleetId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create fleet invitation
     - POST /v1/fleets/{fleet_id}/members/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) Details of the invitation 
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postFleetsFleetIdMembersWithRequestBuilder(body: PostFleetsFleetIdMembersInvitation, fleetId: Int64, datasource: Datasource_postFleetsFleetIdMembers? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/members/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postFleetsFleetIdWings: String { 
        case tranquility = "tranquility"
    }

    /**
     Create fleet wing

     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFleetsFleetIdWings(fleetId: Int64, datasource: Datasource_postFleetsFleetIdWings? = nil, token: String? = nil, completion: @escaping ((_ data: PostFleetsFleetIdWingsCreated?,_ error: Error?) -> Void)) {
        postFleetsFleetIdWingsWithRequestBuilder(fleetId: fleetId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create fleet wing
     - POST /v1/fleets/{fleet_id}/wings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example={
  "wing_id" : 0
}}]
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<PostFleetsFleetIdWingsCreated> 
     */
    open class func postFleetsFleetIdWingsWithRequestBuilder(fleetId: Int64, datasource: Datasource_postFleetsFleetIdWings? = nil, token: String? = nil) -> RequestBuilder<PostFleetsFleetIdWingsCreated> {
        var path = "/v1/fleets/{fleet_id}/wings/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<PostFleetsFleetIdWingsCreated>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postFleetsFleetIdWingsWingIdSquads: String { 
        case tranquility = "tranquility"
    }

    /**
     Create fleet squad

     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing_id to create squad in 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFleetsFleetIdWingsWingIdSquads(fleetId: Int64, wingId: Int64, datasource: Datasource_postFleetsFleetIdWingsWingIdSquads? = nil, token: String? = nil, completion: @escaping ((_ data: PostFleetsFleetIdWingsWingIdSquadsCreated?,_ error: Error?) -> Void)) {
        postFleetsFleetIdWingsWingIdSquadsWithRequestBuilder(fleetId: fleetId, wingId: wingId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create fleet squad
     - POST /v1/fleets/{fleet_id}/wings/{wing_id}/squads/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example={
  "squad_id" : 0
}}]
     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing_id to create squad in 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<PostFleetsFleetIdWingsWingIdSquadsCreated> 
     */
    open class func postFleetsFleetIdWingsWingIdSquadsWithRequestBuilder(fleetId: Int64, wingId: Int64, datasource: Datasource_postFleetsFleetIdWingsWingIdSquads? = nil, token: String? = nil) -> RequestBuilder<PostFleetsFleetIdWingsWingIdSquadsCreated> {
        var path = "/v1/fleets/{fleet_id}/wings/{wing_id}/squads/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let wingIdPreEscape = "\(wingId)"
        let wingIdPostEscape = wingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{wing_id}", with: wingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<PostFleetsFleetIdWingsWingIdSquadsCreated>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_putFleetsFleetId: String { 
        case tranquility = "tranquility"
    }

    /**
     Update fleet

     - parameter body: (body) What to update for this fleet 
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFleetsFleetId(body: PutFleetsFleetIdNewSettings, fleetId: Int64, datasource: Datasource_putFleetsFleetId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFleetsFleetIdWithRequestBuilder(body: body, fleetId: fleetId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update fleet
     - PUT /v1/fleets/{fleet_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) What to update for this fleet 
     - parameter fleetId: (path) ID for a fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putFleetsFleetIdWithRequestBuilder(body: PutFleetsFleetIdNewSettings, fleetId: Int64, datasource: Datasource_putFleetsFleetId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_putFleetsFleetIdMembersMemberId: String { 
        case tranquility = "tranquility"
    }

    /**
     Move fleet member

     - parameter body: (body) Details of the invitation 
     - parameter fleetId: (path) ID for a fleet 
     - parameter memberId: (path) The character ID of a member in this fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFleetsFleetIdMembersMemberId(body: PutFleetsFleetIdMembersMemberIdMovement, fleetId: Int64, memberId: Int, datasource: Datasource_putFleetsFleetIdMembersMemberId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFleetsFleetIdMembersMemberIdWithRequestBuilder(body: body, fleetId: fleetId, memberId: memberId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Move fleet member
     - PUT /v1/fleets/{fleet_id}/members/{member_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) Details of the invitation 
     - parameter fleetId: (path) ID for a fleet 
     - parameter memberId: (path) The character ID of a member in this fleet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putFleetsFleetIdMembersMemberIdWithRequestBuilder(body: PutFleetsFleetIdMembersMemberIdMovement, fleetId: Int64, memberId: Int, datasource: Datasource_putFleetsFleetIdMembersMemberId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/members/{member_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{member_id}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_putFleetsFleetIdSquadsSquadId: String { 
        case tranquility = "tranquility"
    }

    /**
     Rename fleet squad

     - parameter body: (body) New name of the squad 
     - parameter fleetId: (path) ID for a fleet 
     - parameter squadId: (path) The squad to rename 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFleetsFleetIdSquadsSquadId(body: PutFleetsFleetIdSquadsSquadIdNaming, fleetId: Int64, squadId: Int64, datasource: Datasource_putFleetsFleetIdSquadsSquadId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFleetsFleetIdSquadsSquadIdWithRequestBuilder(body: body, fleetId: fleetId, squadId: squadId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Rename fleet squad
     - PUT /v1/fleets/{fleet_id}/squads/{squad_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) New name of the squad 
     - parameter fleetId: (path) ID for a fleet 
     - parameter squadId: (path) The squad to rename 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putFleetsFleetIdSquadsSquadIdWithRequestBuilder(body: PutFleetsFleetIdSquadsSquadIdNaming, fleetId: Int64, squadId: Int64, datasource: Datasource_putFleetsFleetIdSquadsSquadId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/squads/{squad_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let squadIdPreEscape = "\(squadId)"
        let squadIdPostEscape = squadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{squad_id}", with: squadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_putFleetsFleetIdWingsWingId: String { 
        case tranquility = "tranquility"
    }

    /**
     Rename fleet wing

     - parameter body: (body) New name of the wing 
     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing to rename 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFleetsFleetIdWingsWingId(body: PutFleetsFleetIdWingsWingIdNaming, fleetId: Int64, wingId: Int64, datasource: Datasource_putFleetsFleetIdWingsWingId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putFleetsFleetIdWingsWingIdWithRequestBuilder(body: body, fleetId: fleetId, wingId: wingId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Rename fleet wing
     - PUT /v1/fleets/{fleet_id}/wings/{wing_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) New name of the wing 
     - parameter fleetId: (path) ID for a fleet 
     - parameter wingId: (path) The wing to rename 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putFleetsFleetIdWingsWingIdWithRequestBuilder(body: PutFleetsFleetIdWingsWingIdNaming, fleetId: Int64, wingId: Int64, datasource: Datasource_putFleetsFleetIdWingsWingId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/fleets/{fleet_id}/wings/{wing_id}/"
        let fleetIdPreEscape = "\(fleetId)"
        let fleetIdPostEscape = fleetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fleet_id}", with: fleetIdPostEscape, options: .literal, range: nil)
        let wingIdPreEscape = "\(wingId)"
        let wingIdPostEscape = wingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{wing_id}", with: wingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
