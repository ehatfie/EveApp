//
// PlanetaryInteractionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PlanetaryInteractionAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdPlanets: String { 
        case tranquility = "tranquility"
    }

    /**
     Get colonies

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdPlanets(characterId: Int, datasource: Datasource_getCharactersCharacterIdPlanets? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdPlanets200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdPlanetsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get colonies
     - GET /v1/characters/{character_id}/planets/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
}, {
  "planet_type" : "temperate",
  "planet_id" : 1,
  "owner_id" : 6,
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "upgrade_level" : 2,
  "solar_system_id" : 5,
  "num_pins" : 1
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdPlanets200Ok]> 
     */
    open class func getCharactersCharacterIdPlanetsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdPlanets? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdPlanets200Ok]> {
        var path = "/v1/characters/{character_id}/planets/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdPlanets200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdPlanetsPlanetId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get colony layout

     - parameter characterId: (path) An EVE character ID 
     - parameter planetId: (path) Planet id of the target planet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdPlanetsPlanetId(characterId: Int, planetId: Int, datasource: Datasource_getCharactersCharacterIdPlanetsPlanetId? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdPlanetsPlanetIdOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdPlanetsPlanetIdWithRequestBuilder(characterId: characterId, planetId: planetId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get colony layout
     - GET /v3/characters/{character_id}/planets/{planet_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example={
  "routes" : [ {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  }, {
    "quantity" : 9.965781,
    "route_id" : 9,
    "content_type_id" : 4,
    "destination_pin_id" : 5,
    "source_pin_id" : 6,
    "waypoints" : [ 8, 8, 8, 8, 8 ]
  } ],
  "links" : [ {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  }, {
    "link_level" : 6,
    "destination_pin_id" : 0,
    "source_pin_id" : 1
  } ],
  "pins" : [ {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  }, {
    "install_time" : "2000-01-23T04:56:07.000+00:00",
    "factory_details" : {
      "schematic_id" : 1
    },
    "last_cycle_start" : "2000-01-23T04:56:07.000+00:00",
    "contents" : [ {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    }, {
      "amount" : 5,
      "type_id" : 5
    } ],
    "schematic_id" : 7,
    "type_id" : 1,
    "latitude" : 1.0246457,
    "expiry_time" : "2000-01-23T04:56:07.000+00:00",
    "pin_id" : 6,
    "extractor_details" : {
      "head_radius" : 7.0614014,
      "qty_per_cycle" : 7,
      "cycle_time" : 2,
      "heads" : [ {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      }, {
        "latitude" : 3.6160767,
        "head_id" : 8,
        "longitude" : 2.027123
      } ],
      "product_type_id" : 4
    },
    "longitude" : 1.4894159
  } ]
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter planetId: (path) Planet id of the target planet 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdPlanetsPlanetIdOk> 
     */
    open class func getCharactersCharacterIdPlanetsPlanetIdWithRequestBuilder(characterId: Int, planetId: Int, datasource: Datasource_getCharactersCharacterIdPlanetsPlanetId? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdPlanetsPlanetIdOk> {
        var path = "/v3/characters/{character_id}/planets/{planet_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let planetIdPreEscape = "\(planetId)"
        let planetIdPostEscape = planetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planet_id}", with: planetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<GetCharactersCharacterIdPlanetsPlanetIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdCustomsOffices: String { 
        case tranquility = "tranquility"
    }

    /**
     List corporation customs offices

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCorporationsCorporationIdCustomsOffices(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdCustomsOffices? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdCustomsOffices200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdCustomsOfficesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List corporation customs offices
     - GET /v1/corporations/{corporation_id}/customs_offices/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
}, {
  "corporation_tax_rate" : 1.4658129,
  "neutral_standing_tax_rate" : 2.302136,
  "standing_level" : "bad",
  "system_id" : 2,
  "terrible_standing_tax_rate" : 4.145608,
  "alliance_tax_rate" : 0.8008282,
  "reinforce_exit_start" : 8,
  "bad_standing_tax_rate" : 6.0274563,
  "reinforce_exit_end" : 21,
  "office_id" : 7,
  "excellent_standing_tax_rate" : 5.962134,
  "good_standing_tax_rate" : 5.637377,
  "allow_access_with_standings" : true,
  "allow_alliance_access" : true
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdCustomsOffices200Ok]> 
     */
    open class func getCorporationsCorporationIdCustomsOfficesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdCustomsOffices? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdCustomsOffices200Ok]> {
        var path = "/v1/corporations/{corporation_id}/customs_offices/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdCustomsOffices200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSchematicsSchematicId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get schematic information

     - parameter schematicId: (path) A PI schematic ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseSchematicsSchematicId(schematicId: Int, datasource: Datasource_getUniverseSchematicsSchematicId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseSchematicsSchematicIdOk?,_ error: Error?) -> Void)) {
        getUniverseSchematicsSchematicIdWithRequestBuilder(schematicId: schematicId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get schematic information
     - GET /v1/universe/schematics/{schematic_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "schematic_name" : "schematic_name",
  "cycle_time" : 0
}}]
     - parameter schematicId: (path) A PI schematic ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseSchematicsSchematicIdOk> 
     */
    open class func getUniverseSchematicsSchematicIdWithRequestBuilder(schematicId: Int, datasource: Datasource_getUniverseSchematicsSchematicId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseSchematicsSchematicIdOk> {
        var path = "/v1/universe/schematics/{schematic_id}/"
        let schematicIdPreEscape = "\(schematicId)"
        let schematicIdPostEscape = schematicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schematic_id}", with: schematicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseSchematicsSchematicIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
