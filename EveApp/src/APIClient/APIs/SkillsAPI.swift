//
// SkillsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SkillsAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdAttributes: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character attributes

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdAttributes(characterId: Int, datasource: Datasource_getCharactersCharacterIdAttributes? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdAttributesOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdAttributesWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character attributes
     - GET /v1/characters/{character_id}/attributes/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "last_remap_date" : "2000-01-23T04:56:07.000+00:00",
  "memory" : 5,
  "willpower" : 2,
  "bonus_remaps" : 0,
  "accrued_remap_cooldown_date" : "2000-01-23T04:56:07.000+00:00",
  "charisma" : 6,
  "intelligence" : 1,
  "perception" : 5
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdAttributesOk> 
     */
    open class func getCharactersCharacterIdAttributesWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdAttributes? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdAttributesOk> {
        var path = "/v1/characters/{character_id}/attributes/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdAttributesOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdSkillqueue: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character's skill queue

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdSkillqueue(characterId: Int, datasource: Datasource_getCharactersCharacterIdSkillqueue? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdSkillqueue200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdSkillqueueWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character's skill queue
     - GET /v2/characters/{character_id}/skillqueue/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "queue_position" : 5,
  "finish_date" : "2000-01-23T04:56:07.000+00:00",
  "level_end_sp" : 6,
  "level_start_sp" : 1,
  "finished_level" : 0,
  "skill_id" : 5,
  "training_start_sp" : 2,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdSkillqueue200Ok]> 
     */
    open class func getCharactersCharacterIdSkillqueueWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdSkillqueue? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdSkillqueue200Ok]> {
        var path = "/v2/characters/{character_id}/skillqueue/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdSkillqueue200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdSkills: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character skills

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdSkills(characterId: Int, datasource: Datasource_getCharactersCharacterIdSkills? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdSkillsOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdSkillsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character skills
     - GET /v4/characters/{character_id}/skills/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "skills" : [ {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  }, {
    "trained_skill_level" : 5,
    "active_skill_level" : 0,
    "skill_id" : 6,
    "skillpoints_in_skill" : 1
  } ],
  "unallocated_sp" : 2,
  "total_sp" : 5
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdSkillsOk> 
     */
    open class func getCharactersCharacterIdSkillsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdSkills? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdSkillsOk> {
        var path = "/v4/characters/{character_id}/skills/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdSkillsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
