//
// UniverseAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UniverseAPI {
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseAncestries: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseAncestries: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseAncestries: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get ancestries

     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseAncestries(acceptLanguage: AcceptLanguage_getUniverseAncestries? = nil, datasource: Datasource_getUniverseAncestries? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseAncestries? = nil, completion: @escaping ((_ data: [GetUniverseAncestries200Ok]?,_ error: Error?) -> Void)) {
        getUniverseAncestriesWithRequestBuilder(acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ancestries
     - GET /v1/universe/ancestries/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
}, {
  "short_description" : "short_description",
  "name" : "name",
  "description" : "description",
  "id" : 1,
  "icon_id" : 6,
  "bloodline_id" : 0
} ]}]
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<[GetUniverseAncestries200Ok]> 
     */
    open class func getUniverseAncestriesWithRequestBuilder(acceptLanguage: AcceptLanguage_getUniverseAncestries? = nil, datasource: Datasource_getUniverseAncestries? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseAncestries? = nil) -> RequestBuilder<[GetUniverseAncestries200Ok]> {
        let path = "/v1/universe/ancestries/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseAncestries200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseAsteroidBeltsAsteroidBeltId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get asteroid belt information

     - parameter asteroidBeltId: (path) asteroid_belt_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseAsteroidBeltsAsteroidBeltId(asteroidBeltId: Int, datasource: Datasource_getUniverseAsteroidBeltsAsteroidBeltId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseAsteroidBeltsAsteroidBeltIdOk?,_ error: Error?) -> Void)) {
        getUniverseAsteroidBeltsAsteroidBeltIdWithRequestBuilder(asteroidBeltId: asteroidBeltId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get asteroid belt information
     - GET /v1/universe/asteroid_belts/{asteroid_belt_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "system_id" : 5,
  "name" : "name",
  "position" : {
    "x" : 0.8008281904610115,
    "y" : 6.027456183070403,
    "z" : 1.4658129805029452
  }
}}]
     - parameter asteroidBeltId: (path) asteroid_belt_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseAsteroidBeltsAsteroidBeltIdOk> 
     */
    open class func getUniverseAsteroidBeltsAsteroidBeltIdWithRequestBuilder(asteroidBeltId: Int, datasource: Datasource_getUniverseAsteroidBeltsAsteroidBeltId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseAsteroidBeltsAsteroidBeltIdOk> {
        var path = "/v1/universe/asteroid_belts/{asteroid_belt_id}/"
        let asteroidBeltIdPreEscape = "\(asteroidBeltId)"
        let asteroidBeltIdPostEscape = asteroidBeltIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{asteroid_belt_id}", with: asteroidBeltIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseAsteroidBeltsAsteroidBeltIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseBloodlines: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseBloodlines: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseBloodlines: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get bloodlines

     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseBloodlines(acceptLanguage: AcceptLanguage_getUniverseBloodlines? = nil, datasource: Datasource_getUniverseBloodlines? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseBloodlines? = nil, completion: @escaping ((_ data: [GetUniverseBloodlines200Ok]?,_ error: Error?) -> Void)) {
        getUniverseBloodlinesWithRequestBuilder(acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get bloodlines
     - GET /v1/universe/bloodlines/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
}, {
  "ship_type_id" : 9,
  "corporation_id" : 1,
  "memory" : 5,
  "willpower" : 3,
  "race_id" : 7,
  "name" : "name",
  "description" : "description",
  "bloodline_id" : 0,
  "charisma" : 6,
  "intelligence" : 5,
  "perception" : 2
} ]}]
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<[GetUniverseBloodlines200Ok]> 
     */
    open class func getUniverseBloodlinesWithRequestBuilder(acceptLanguage: AcceptLanguage_getUniverseBloodlines? = nil, datasource: Datasource_getUniverseBloodlines? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseBloodlines? = nil) -> RequestBuilder<[GetUniverseBloodlines200Ok]> {
        let path = "/v1/universe/bloodlines/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseBloodlines200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseCategories: String { 
        case tranquility = "tranquility"
    }

    /**
     Get item categories

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseCategories(datasource: Datasource_getUniverseCategories? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseCategoriesWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item categories
     - GET /v1/universe/categories/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseCategoriesWithRequestBuilder(datasource: Datasource_getUniverseCategories? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/categories/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseCategoriesCategoryId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseCategoriesCategoryId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseCategoriesCategoryId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get item category information

     - parameter categoryId: (path) An Eve item category ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseCategoriesCategoryId(categoryId: Int, acceptLanguage: AcceptLanguage_getUniverseCategoriesCategoryId? = nil, datasource: Datasource_getUniverseCategoriesCategoryId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseCategoriesCategoryId? = nil, completion: @escaping ((_ data: GetUniverseCategoriesCategoryIdOk?,_ error: Error?) -> Void)) {
        getUniverseCategoriesCategoryIdWithRequestBuilder(categoryId: categoryId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item category information
     - GET /v1/universe/categories/{category_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "category_id" : 0,
  "name" : "name",
  "groups" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "published" : true
}}]
     - parameter categoryId: (path) An Eve item category ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseCategoriesCategoryIdOk> 
     */
    open class func getUniverseCategoriesCategoryIdWithRequestBuilder(categoryId: Int, acceptLanguage: AcceptLanguage_getUniverseCategoriesCategoryId? = nil, datasource: Datasource_getUniverseCategoriesCategoryId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseCategoriesCategoryId? = nil) -> RequestBuilder<GetUniverseCategoriesCategoryIdOk> {
        var path = "/v1/universe/categories/{category_id}/"
        let categoryIdPreEscape = "\(categoryId)"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{category_id}", with: categoryIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseCategoriesCategoryIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseConstellations: String { 
        case tranquility = "tranquility"
    }

    /**
     Get constellations

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseConstellations(datasource: Datasource_getUniverseConstellations? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseConstellationsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get constellations
     - GET /v1/universe/constellations/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseConstellationsWithRequestBuilder(datasource: Datasource_getUniverseConstellations? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/constellations/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseConstellationsConstellationId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseConstellationsConstellationId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseConstellationsConstellationId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get constellation information

     - parameter constellationId: (path) constellation_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseConstellationsConstellationId(constellationId: Int, acceptLanguage: AcceptLanguage_getUniverseConstellationsConstellationId? = nil, datasource: Datasource_getUniverseConstellationsConstellationId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseConstellationsConstellationId? = nil, completion: @escaping ((_ data: GetUniverseConstellationsConstellationIdOk?,_ error: Error?) -> Void)) {
        getUniverseConstellationsConstellationIdWithRequestBuilder(constellationId: constellationId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get constellation information
     - GET /v1/universe/constellations/{constellation_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "systems" : [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ],
  "name" : "name",
  "region_id" : 5,
  "position" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  },
  "constellation_id" : 0
}}]
     - parameter constellationId: (path) constellation_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseConstellationsConstellationIdOk> 
     */
    open class func getUniverseConstellationsConstellationIdWithRequestBuilder(constellationId: Int, acceptLanguage: AcceptLanguage_getUniverseConstellationsConstellationId? = nil, datasource: Datasource_getUniverseConstellationsConstellationId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseConstellationsConstellationId? = nil) -> RequestBuilder<GetUniverseConstellationsConstellationIdOk> {
        var path = "/v1/universe/constellations/{constellation_id}/"
        let constellationIdPreEscape = "\(constellationId)"
        let constellationIdPostEscape = constellationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{constellation_id}", with: constellationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseConstellationsConstellationIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseFactions: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseFactions: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseFactions: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get factions

     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseFactions(acceptLanguage: AcceptLanguage_getUniverseFactions? = nil, datasource: Datasource_getUniverseFactions? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseFactions? = nil, completion: @escaping ((_ data: [GetUniverseFactions200Ok]?,_ error: Error?) -> Void)) {
        getUniverseFactionsWithRequestBuilder(acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get factions
     - GET /v2/universe/factions/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
}, {
  "militia_corporation_id" : 1,
  "corporation_id" : 0,
  "name" : "name",
  "description" : "description",
  "is_unique" : true,
  "faction_id" : 6,
  "solar_system_id" : 5,
  "station_count" : 2,
  "station_system_count" : 7,
  "size_factor" : 5.962134
} ]}]
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<[GetUniverseFactions200Ok]> 
     */
    open class func getUniverseFactionsWithRequestBuilder(acceptLanguage: AcceptLanguage_getUniverseFactions? = nil, datasource: Datasource_getUniverseFactions? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseFactions? = nil) -> RequestBuilder<[GetUniverseFactions200Ok]> {
        let path = "/v2/universe/factions/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseFactions200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseGraphics: String { 
        case tranquility = "tranquility"
    }

    /**
     Get graphics

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseGraphics(datasource: Datasource_getUniverseGraphics? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseGraphicsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get graphics
     - GET /v1/universe/graphics/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseGraphicsWithRequestBuilder(datasource: Datasource_getUniverseGraphics? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/graphics/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseGraphicsGraphicId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get graphic information

     - parameter graphicId: (path) graphic_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseGraphicsGraphicId(graphicId: Int, datasource: Datasource_getUniverseGraphicsGraphicId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseGraphicsGraphicIdOk?,_ error: Error?) -> Void)) {
        getUniverseGraphicsGraphicIdWithRequestBuilder(graphicId: graphicId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get graphic information
     - GET /v1/universe/graphics/{graphic_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "sof_dna" : "sof_dna",
  "sof_fation_name" : "sof_fation_name",
  "collision_file" : "collision_file",
  "icon_folder" : "icon_folder",
  "sof_race_name" : "sof_race_name",
  "graphic_file" : "graphic_file",
  "sof_hull_name" : "sof_hull_name",
  "graphic_id" : 0
}}]
     - parameter graphicId: (path) graphic_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseGraphicsGraphicIdOk> 
     */
    open class func getUniverseGraphicsGraphicIdWithRequestBuilder(graphicId: Int, datasource: Datasource_getUniverseGraphicsGraphicId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseGraphicsGraphicIdOk> {
        var path = "/v1/universe/graphics/{graphic_id}/"
        let graphicIdPreEscape = "\(graphicId)"
        let graphicIdPostEscape = graphicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{graphic_id}", with: graphicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseGraphicsGraphicIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseGroups: String { 
        case tranquility = "tranquility"
    }

    /**
     Get item groups

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseGroups(datasource: Datasource_getUniverseGroups? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseGroupsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item groups
     - GET /v1/universe/groups/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseGroupsWithRequestBuilder(datasource: Datasource_getUniverseGroups? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/groups/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseGroupsGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseGroupsGroupId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseGroupsGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get item group information

     - parameter groupId: (path) An Eve item group ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseGroupsGroupId(groupId: Int, acceptLanguage: AcceptLanguage_getUniverseGroupsGroupId? = nil, datasource: Datasource_getUniverseGroupsGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseGroupsGroupId? = nil, completion: @escaping ((_ data: GetUniverseGroupsGroupIdOk?,_ error: Error?) -> Void)) {
        getUniverseGroupsGroupIdWithRequestBuilder(groupId: groupId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item group information
     - GET /v1/universe/groups/{group_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "types" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  "category_id" : 0,
  "group_id" : 6,
  "name" : "name",
  "published" : true
}}]
     - parameter groupId: (path) An Eve item group ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseGroupsGroupIdOk> 
     */
    open class func getUniverseGroupsGroupIdWithRequestBuilder(groupId: Int, acceptLanguage: AcceptLanguage_getUniverseGroupsGroupId? = nil, datasource: Datasource_getUniverseGroupsGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseGroupsGroupId? = nil) -> RequestBuilder<GetUniverseGroupsGroupIdOk> {
        var path = "/v1/universe/groups/{group_id}/"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseGroupsGroupIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseMoonsMoonId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get moon information

     - parameter moonId: (path) moon_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseMoonsMoonId(moonId: Int, datasource: Datasource_getUniverseMoonsMoonId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseMoonsMoonIdOk?,_ error: Error?) -> Void)) {
        getUniverseMoonsMoonIdWithRequestBuilder(moonId: moonId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get moon information
     - GET /v1/universe/moons/{moon_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "system_id" : 5,
  "name" : "name",
  "moon_id" : 0,
  "position" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  }
}}]
     - parameter moonId: (path) moon_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseMoonsMoonIdOk> 
     */
    open class func getUniverseMoonsMoonIdWithRequestBuilder(moonId: Int, datasource: Datasource_getUniverseMoonsMoonId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseMoonsMoonIdOk> {
        var path = "/v1/universe/moons/{moon_id}/"
        let moonIdPreEscape = "\(moonId)"
        let moonIdPostEscape = moonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moon_id}", with: moonIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseMoonsMoonIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniversePlanetsPlanetId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get planet information

     - parameter planetId: (path) planet_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniversePlanetsPlanetId(planetId: Int, datasource: Datasource_getUniversePlanetsPlanetId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniversePlanetsPlanetIdOk?,_ error: Error?) -> Void)) {
        getUniversePlanetsPlanetIdWithRequestBuilder(planetId: planetId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get planet information
     - GET /v1/universe/planets/{planet_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "planet_id" : 0,
  "system_id" : 5,
  "type_id" : 2,
  "name" : "name",
  "position" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  }
}}]
     - parameter planetId: (path) planet_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniversePlanetsPlanetIdOk> 
     */
    open class func getUniversePlanetsPlanetIdWithRequestBuilder(planetId: Int, datasource: Datasource_getUniversePlanetsPlanetId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniversePlanetsPlanetIdOk> {
        var path = "/v1/universe/planets/{planet_id}/"
        let planetIdPreEscape = "\(planetId)"
        let planetIdPostEscape = planetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planet_id}", with: planetIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniversePlanetsPlanetIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseRaces: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseRaces: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseRaces: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get character races

     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseRaces(acceptLanguage: AcceptLanguage_getUniverseRaces? = nil, datasource: Datasource_getUniverseRaces? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseRaces? = nil, completion: @escaping ((_ data: [GetUniverseRaces200Ok]?,_ error: Error?) -> Void)) {
        getUniverseRacesWithRequestBuilder(acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character races
     - GET /v1/universe/races/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "alliance_id" : 0,
  "race_id" : 6,
  "name" : "name",
  "description" : "description"
}, {
  "alliance_id" : 0,
  "race_id" : 6,
  "name" : "name",
  "description" : "description"
}, {
  "alliance_id" : 0,
  "race_id" : 6,
  "name" : "name",
  "description" : "description"
}, {
  "alliance_id" : 0,
  "race_id" : 6,
  "name" : "name",
  "description" : "description"
} ]}]
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<[GetUniverseRaces200Ok]> 
     */
    open class func getUniverseRacesWithRequestBuilder(acceptLanguage: AcceptLanguage_getUniverseRaces? = nil, datasource: Datasource_getUniverseRaces? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseRaces? = nil) -> RequestBuilder<[GetUniverseRaces200Ok]> {
        let path = "/v1/universe/races/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseRaces200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseRegions: String { 
        case tranquility = "tranquility"
    }

    /**
     Get regions

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseRegions(datasource: Datasource_getUniverseRegions? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseRegionsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get regions
     - GET /v1/universe/regions/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseRegionsWithRequestBuilder(datasource: Datasource_getUniverseRegions? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/regions/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseRegionsRegionId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseRegionsRegionId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseRegionsRegionId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get region information

     - parameter regionId: (path) region_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseRegionsRegionId(regionId: Int, acceptLanguage: AcceptLanguage_getUniverseRegionsRegionId? = nil, datasource: Datasource_getUniverseRegionsRegionId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseRegionsRegionId? = nil, completion: @escaping ((_ data: GetUniverseRegionsRegionIdOk?,_ error: Error?) -> Void)) {
        getUniverseRegionsRegionIdWithRequestBuilder(regionId: regionId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get region information
     - GET /v1/universe/regions/{region_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "constellations" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  "name" : "name",
  "region_id" : 6,
  "description" : "description"
}}]
     - parameter regionId: (path) region_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseRegionsRegionIdOk> 
     */
    open class func getUniverseRegionsRegionIdWithRequestBuilder(regionId: Int, acceptLanguage: AcceptLanguage_getUniverseRegionsRegionId? = nil, datasource: Datasource_getUniverseRegionsRegionId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseRegionsRegionId? = nil) -> RequestBuilder<GetUniverseRegionsRegionIdOk> {
        var path = "/v1/universe/regions/{region_id}/"
        let regionIdPreEscape = "\(regionId)"
        let regionIdPostEscape = regionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region_id}", with: regionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseRegionsRegionIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStargatesStargateId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get stargate information

     - parameter stargateId: (path) stargate_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseStargatesStargateId(stargateId: Int, datasource: Datasource_getUniverseStargatesStargateId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseStargatesStargateIdOk?,_ error: Error?) -> Void)) {
        getUniverseStargatesStargateIdWithRequestBuilder(stargateId: stargateId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get stargate information
     - GET /v1/universe/stargates/{stargate_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "system_id" : 7,
  "type_id" : 9,
  "destination" : {
    "system_id" : 6,
    "stargate_id" : 0
  },
  "name" : "name",
  "position" : {
    "x" : 1.4658129805029452,
    "y" : 5.962133916683182,
    "z" : 5.637376656633329
  },
  "stargate_id" : 2
}}]
     - parameter stargateId: (path) stargate_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseStargatesStargateIdOk> 
     */
    open class func getUniverseStargatesStargateIdWithRequestBuilder(stargateId: Int, datasource: Datasource_getUniverseStargatesStargateId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseStargatesStargateIdOk> {
        var path = "/v1/universe/stargates/{stargate_id}/"
        let stargateIdPreEscape = "\(stargateId)"
        let stargateIdPostEscape = stargateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stargate_id}", with: stargateIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseStargatesStargateIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStarsStarId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get star information

     - parameter starId: (path) star_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseStarsStarId(starId: Int, datasource: Datasource_getUniverseStarsStarId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseStarsStarIdOk?,_ error: Error?) -> Void)) {
        getUniverseStarsStarIdWithRequestBuilder(starId: starId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get star information
     - GET /v1/universe/stars/{star_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "type_id" : 2,
  "name" : "name",
  "temperature" : 5,
  "luminosity" : 6.0274563,
  "solar_system_id" : 5,
  "radius" : 1,
  "spectral_class" : "K2 V",
  "age" : 0
}}]
     - parameter starId: (path) star_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseStarsStarIdOk> 
     */
    open class func getUniverseStarsStarIdWithRequestBuilder(starId: Int, datasource: Datasource_getUniverseStarsStarId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseStarsStarIdOk> {
        var path = "/v1/universe/stars/{star_id}/"
        let starIdPreEscape = "\(starId)"
        let starIdPostEscape = starIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{star_id}", with: starIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseStarsStarIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStationsStationId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get station information

     - parameter stationId: (path) station_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseStationsStationId(stationId: Int, datasource: Datasource_getUniverseStationsStationId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetUniverseStationsStationIdOk?,_ error: Error?) -> Void)) {
        getUniverseStationsStationIdWithRequestBuilder(stationId: stationId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get station information
     - GET /v2/universe/stations/{station_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "owner" : 1,
  "reprocessing_efficiency" : 9.301444,
  "office_rental_cost" : 6.0274563,
  "system_id" : 4,
  "type_id" : 7,
  "race_id" : 7,
  "station_id" : 2,
  "max_dockable_ship_volume" : 0.8008282,
  "name" : "name",
  "position" : {
    "x" : 5.962133916683182,
    "y" : 5.637376656633329,
    "z" : 2.3021358869347655
  },
  "services" : [ "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions", "bounty-missions" ],
  "reprocessing_stations_take" : 3.6160767
}}]
     - parameter stationId: (path) station_id integer 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetUniverseStationsStationIdOk> 
     */
    open class func getUniverseStationsStationIdWithRequestBuilder(stationId: Int, datasource: Datasource_getUniverseStationsStationId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetUniverseStationsStationIdOk> {
        var path = "/v2/universe/stations/{station_id}/"
        let stationIdPreEscape = "\(stationId)"
        let stationIdPostEscape = stationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{station_id}", with: stationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseStationsStationIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStructures: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getUniverseStructures: String { 
        case market = "market"
        case manufacturingBasic = "manufacturing_basic"
    }

    /**
     List all public structures

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter filter: (query) Only list public structures that have this service online (optional)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseStructures(datasource: Datasource_getUniverseStructures? = nil, filter: Filter_getUniverseStructures? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int64]?,_ error: Error?) -> Void)) {
        getUniverseStructuresWithRequestBuilder(datasource: datasource, filter: filter, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all public structures
     - GET /v1/universe/structures/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter filter: (query) Only list public structures that have this service online (optional)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int64]> 
     */
    open class func getUniverseStructuresWithRequestBuilder(datasource: Datasource_getUniverseStructures? = nil, filter: Filter_getUniverseStructures? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int64]> {
        let path = "/v1/universe/structures/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "filter": filter?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int64]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStructuresStructureId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get structure information

     - parameter structureId: (path) An Eve structure ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseStructuresStructureId(structureId: Int64, datasource: Datasource_getUniverseStructuresStructureId? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetUniverseStructuresStructureIdOk?,_ error: Error?) -> Void)) {
        getUniverseStructuresStructureIdWithRequestBuilder(structureId: structureId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get structure information
     - GET /v2/universe/structures/{structure_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "owner_id" : 0,
  "type_id" : 2,
  "name" : "name",
  "solar_system_id" : 5,
  "position" : {
    "x" : 6.027456183070403,
    "y" : 1.4658129805029452,
    "z" : 5.962133916683182
  }
}}]
     - parameter structureId: (path) An Eve structure ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetUniverseStructuresStructureIdOk> 
     */
    open class func getUniverseStructuresStructureIdWithRequestBuilder(structureId: Int64, datasource: Datasource_getUniverseStructuresStructureId? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetUniverseStructuresStructureIdOk> {
        var path = "/v2/universe/structures/{structure_id}/"
        let structureIdPreEscape = "\(structureId)"
        let structureIdPostEscape = structureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{structure_id}", with: structureIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseStructuresStructureIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSystemJumps: String { 
        case tranquility = "tranquility"
    }

    /**
     Get system jumps

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseSystemJumps(datasource: Datasource_getUniverseSystemJumps? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetUniverseSystemJumps200Ok]?,_ error: Error?) -> Void)) {
        getUniverseSystemJumpsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get system jumps
     - GET /v1/universe/system_jumps/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
}, {
  "system_id" : 6,
  "ship_jumps" : 0
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetUniverseSystemJumps200Ok]> 
     */
    open class func getUniverseSystemJumpsWithRequestBuilder(datasource: Datasource_getUniverseSystemJumps? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetUniverseSystemJumps200Ok]> {
        let path = "/v1/universe/system_jumps/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseSystemJumps200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSystemKills: String { 
        case tranquility = "tranquility"
    }

    /**
     Get system kills

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseSystemKills(datasource: Datasource_getUniverseSystemKills? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetUniverseSystemKills200Ok]?,_ error: Error?) -> Void)) {
        getUniverseSystemKillsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get system kills
     - GET /v2/universe/system_kills/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
}, {
  "npc_kills" : 0,
  "ship_kills" : 1,
  "system_id" : 5,
  "pod_kills" : 6
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetUniverseSystemKills200Ok]> 
     */
    open class func getUniverseSystemKillsWithRequestBuilder(datasource: Datasource_getUniverseSystemKills? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetUniverseSystemKills200Ok]> {
        let path = "/v2/universe/system_kills/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetUniverseSystemKills200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSystems: String { 
        case tranquility = "tranquility"
    }

    /**
     Get solar systems

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseSystems(datasource: Datasource_getUniverseSystems? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseSystemsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get solar systems
     - GET /v1/universe/systems/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseSystemsWithRequestBuilder(datasource: Datasource_getUniverseSystems? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/systems/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseSystemsSystemId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSystemsSystemId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseSystemsSystemId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get solar system information

     - parameter systemId: (path) system_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseSystemsSystemId(systemId: Int, acceptLanguage: AcceptLanguage_getUniverseSystemsSystemId? = nil, datasource: Datasource_getUniverseSystemsSystemId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseSystemsSystemId? = nil, completion: @escaping ((_ data: GetUniverseSystemsSystemIdOk?,_ error: Error?) -> Void)) {
        getUniverseSystemsSystemIdWithRequestBuilder(systemId: systemId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get solar system information
     - GET /v4/universe/systems/{system_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "star_id" : 3,
  "stargates" : [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ],
  "security_status" : 9.301444,
  "planets" : [ {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  }, {
    "planet_id" : 5,
    "moons" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    "asteroid_belts" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
  } ],
  "system_id" : 7,
  "security_class" : "security_class",
  "name" : "name",
  "position" : {
    "x" : 5.637376656633329,
    "y" : 2.3021358869347655,
    "z" : 7.061401241503109
  },
  "stations" : [ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 ],
  "constellation_id" : 0
}}]
     - parameter systemId: (path) system_id integer 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseSystemsSystemIdOk> 
     */
    open class func getUniverseSystemsSystemIdWithRequestBuilder(systemId: Int, acceptLanguage: AcceptLanguage_getUniverseSystemsSystemId? = nil, datasource: Datasource_getUniverseSystemsSystemId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseSystemsSystemId? = nil) -> RequestBuilder<GetUniverseSystemsSystemIdOk> {
        var path = "/v4/universe/systems/{system_id}/"
        let systemIdPreEscape = "\(systemId)"
        let systemIdPostEscape = systemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{system_id}", with: systemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseSystemsSystemIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseTypes: String { 
        case tranquility = "tranquility"
    }

    /**
     Get types

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseTypes(datasource: Datasource_getUniverseTypes? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getUniverseTypesWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get types
     - GET /v1/universe/types/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getUniverseTypesWithRequestBuilder(datasource: Datasource_getUniverseTypes? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/universe/types/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getUniverseTypesTypeId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseTypesTypeId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getUniverseTypesTypeId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get type information

     - parameter typeId: (path) An Eve item type ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniverseTypesTypeId(typeId: Int, acceptLanguage: AcceptLanguage_getUniverseTypesTypeId? = nil, datasource: Datasource_getUniverseTypesTypeId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseTypesTypeId? = nil, completion: @escaping ((_ data: GetUniverseTypesTypeIdOk?,_ error: Error?) -> Void)) {
        getUniverseTypesTypeIdWithRequestBuilder(typeId: typeId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get type information
     - GET /v3/universe/types/{type_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "type_id" : 1,
  "mass" : 3.6160767,
  "description" : "description",
  "published" : true,
  "icon_id" : 7,
  "packaged_volume" : 2.027123,
  "graphic_id" : 5,
  "capacity" : 0.8008282,
  "volume" : 1.0246457,
  "portion_size" : 4,
  "group_id" : 2,
  "name" : "name",
  "dogma_attributes" : [ {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  }, {
    "attribute_id" : 6,
    "value" : 1.4658129
  } ],
  "market_group_id" : 9,
  "radius" : 7.386282,
  "dogma_effects" : [ {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  }, {
    "is_default" : true,
    "effect_id" : 5
  } ]
}}]
     - parameter typeId: (path) An Eve item type ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetUniverseTypesTypeIdOk> 
     */
    open class func getUniverseTypesTypeIdWithRequestBuilder(typeId: Int, acceptLanguage: AcceptLanguage_getUniverseTypesTypeId? = nil, datasource: Datasource_getUniverseTypesTypeId? = nil, ifNoneMatch: String? = nil, language: Language_getUniverseTypesTypeId? = nil) -> RequestBuilder<GetUniverseTypesTypeIdOk> {
        var path = "/v3/universe/types/{type_id}/"
        let typeIdPreEscape = "\(typeId)"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type_id}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetUniverseTypesTypeIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_postUniverseIds: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUniverseIds: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_postUniverseIds: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Bulk names to IDs

     - parameter body: (body) The names to resolve 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUniverseIds(body: [String], acceptLanguage: AcceptLanguage_postUniverseIds? = nil, datasource: Datasource_postUniverseIds? = nil, language: Language_postUniverseIds? = nil, completion: @escaping ((_ data: PostUniverseIdsOk?,_ error: Error?) -> Void)) {
        postUniverseIdsWithRequestBuilder(body: body, acceptLanguage: acceptLanguage, datasource: datasource, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Bulk names to IDs
     - POST /v1/universe/ids/

     - responseHeaders: [Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "characters" : [ {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  }, {
    "name" : "name",
    "id" : 1
  } ],
  "regions" : [ {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  }, {
    "name" : "name",
    "id" : 9
  } ],
  "systems" : [ {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  } ],
  "constellations" : [ {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  } ],
  "inventory_types" : [ {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  }, {
    "name" : "name",
    "id" : 7
  } ],
  "alliances" : [ {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  }, {
    "name" : "name",
    "id" : 6
  } ],
  "stations" : [ {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  }, {
    "name" : "name",
    "id" : 3
  } ],
  "agents" : [ {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  }, {
    "name" : "name",
    "id" : 0
  } ],
  "corporations" : [ {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  }, {
    "name" : "name",
    "id" : 5
  } ],
  "factions" : [ {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  }, {
    "name" : "name",
    "id" : 2
  } ]
}}]
     - parameter body: (body) The names to resolve 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<PostUniverseIdsOk> 
     */
    open class func postUniverseIdsWithRequestBuilder(body: [String], acceptLanguage: AcceptLanguage_postUniverseIds? = nil, datasource: Datasource_postUniverseIds? = nil, language: Language_postUniverseIds? = nil) -> RequestBuilder<PostUniverseIdsOk> {
        let path = "/v1/universe/ids/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PostUniverseIdsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUniverseNames: String { 
        case tranquility = "tranquility"
    }

    /**
     Get names and categories for a set of IDs

     - parameter body: (body) The ids to resolve 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUniverseNames(body: [Int], datasource: Datasource_postUniverseNames? = nil, completion: @escaping ((_ data: [PostUniverseNames200Ok]?,_ error: Error?) -> Void)) {
        postUniverseNamesWithRequestBuilder(body: body, datasource: datasource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get names and categories for a set of IDs
     - POST /v3/universe/names/

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
}, {
  "name" : "name",
  "id" : 0,
  "category" : "alliance"
} ]}]
     - parameter body: (body) The ids to resolve 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[PostUniverseNames200Ok]> 
     */
    open class func postUniverseNamesWithRequestBuilder(body: [Int], datasource: Datasource_postUniverseNames? = nil) -> RequestBuilder<[PostUniverseNames200Ok]> {
        let path = "/v3/universe/names/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])


        let requestBuilder: RequestBuilder<[PostUniverseNames200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
