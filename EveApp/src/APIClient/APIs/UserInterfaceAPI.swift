//
// UserInterfaceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserInterfaceAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUiAutopilotWaypoint: String { 
        case tranquility = "tranquility"
    }

    /**
     Set Autopilot Waypoint

     - parameter addToBeginning: (query) Whether this solar system should be added to the beginning of all waypoints 
     - parameter clearOtherWaypoints: (query) Whether clean other waypoints beforing adding this one 
     - parameter destinationId: (query) The destination to travel to, can be solar system, station or structure&#x27;s id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUiAutopilotWaypoint(addToBeginning: Bool, clearOtherWaypoints: Bool, destinationId: Int64, datasource: Datasource_postUiAutopilotWaypoint? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUiAutopilotWaypointWithRequestBuilder(addToBeginning: addToBeginning, clearOtherWaypoints: clearOtherWaypoints, destinationId: destinationId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set Autopilot Waypoint
     - POST /v2/ui/autopilot/waypoint/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter addToBeginning: (query) Whether this solar system should be added to the beginning of all waypoints 
     - parameter clearOtherWaypoints: (query) Whether clean other waypoints beforing adding this one 
     - parameter destinationId: (query) The destination to travel to, can be solar system, station or structure&#x27;s id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUiAutopilotWaypointWithRequestBuilder(addToBeginning: Bool, clearOtherWaypoints: Bool, destinationId: Int64, datasource: Datasource_postUiAutopilotWaypoint? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2/ui/autopilot/waypoint/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "add_to_beginning": addToBeginning, 
                        "clear_other_waypoints": clearOtherWaypoints, 
                        "datasource": datasource?.rawValue, 
                        "destination_id": destinationId.encodeToJSON(), 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUiOpenwindowContract: String { 
        case tranquility = "tranquility"
    }

    /**
     Open Contract Window

     - parameter contractId: (query) The contract to open 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUiOpenwindowContract(contractId: Int, datasource: Datasource_postUiOpenwindowContract? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUiOpenwindowContractWithRequestBuilder(contractId: contractId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Open Contract Window
     - POST /v1/ui/openwindow/contract/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter contractId: (query) The contract to open 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUiOpenwindowContractWithRequestBuilder(contractId: Int, datasource: Datasource_postUiOpenwindowContract? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/ui/openwindow/contract/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "contract_id": contractId.encodeToJSON(), 
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUiOpenwindowInformation: String { 
        case tranquility = "tranquility"
    }

    /**
     Open Information Window

     - parameter targetId: (query) The target to open 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUiOpenwindowInformation(targetId: Int, datasource: Datasource_postUiOpenwindowInformation? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUiOpenwindowInformationWithRequestBuilder(targetId: targetId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Open Information Window
     - POST /v1/ui/openwindow/information/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter targetId: (query) The target to open 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUiOpenwindowInformationWithRequestBuilder(targetId: Int, datasource: Datasource_postUiOpenwindowInformation? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/ui/openwindow/information/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "target_id": targetId.encodeToJSON(), 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUiOpenwindowMarketdetails: String { 
        case tranquility = "tranquility"
    }

    /**
     Open Market Details

     - parameter typeId: (query) The item type to open in market window 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUiOpenwindowMarketdetails(typeId: Int, datasource: Datasource_postUiOpenwindowMarketdetails? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUiOpenwindowMarketdetailsWithRequestBuilder(typeId: typeId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Open Market Details
     - POST /v1/ui/openwindow/marketdetails/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter typeId: (query) The item type to open in market window 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUiOpenwindowMarketdetailsWithRequestBuilder(typeId: Int, datasource: Datasource_postUiOpenwindowMarketdetails? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/ui/openwindow/marketdetails/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token, 
                        "type_id": typeId.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUiOpenwindowNewmail: String { 
        case tranquility = "tranquility"
    }

    /**
     Open New Mail Window

     - parameter body: (body) The details of mail to create 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUiOpenwindowNewmail(body: PostUiOpenwindowNewmailNewMail, datasource: Datasource_postUiOpenwindowNewmail? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUiOpenwindowNewmailWithRequestBuilder(body: body, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Open New Mail Window
     - POST /v1/ui/openwindow/newmail/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) The details of mail to create 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUiOpenwindowNewmailWithRequestBuilder(body: PostUiOpenwindowNewmailNewMail, datasource: Datasource_postUiOpenwindowNewmail? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/ui/openwindow/newmail/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
