//
// GetCharactersCharacterIdNotifications200Ok.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** 200 ok object */

public struct GetCharactersCharacterIdNotifications200Ok: Codable {

    public enum SenderType: String, Codable { 
        case character = "character"
        case corporation = "corporation"
        case alliance = "alliance"
        case faction = "faction"
        case other = "other"
    }
    public enum ModelType: String, Codable { 
        case acceptedAlly = "AcceptedAlly"
        case acceptedSurrender = "AcceptedSurrender"
        case agentRetiredTrigravian = "AgentRetiredTrigravian"
        case allAnchoringMsg = "AllAnchoringMsg"
        case allMaintenanceBillMsg = "AllMaintenanceBillMsg"
        case allStrucInvulnerableMsg = "AllStrucInvulnerableMsg"
        case allStructVulnerableMsg = "AllStructVulnerableMsg"
        case allWarCorpJoinedAllianceMsg = "AllWarCorpJoinedAllianceMsg"
        case allWarDeclaredMsg = "AllWarDeclaredMsg"
        case allWarInvalidatedMsg = "AllWarInvalidatedMsg"
        case allWarRetractedMsg = "AllWarRetractedMsg"
        case allWarSurrenderMsg = "AllWarSurrenderMsg"
        case allianceCapitalChanged = "AllianceCapitalChanged"
        case allianceWarDeclaredV2 = "AllianceWarDeclaredV2"
        case allyContractCancelled = "AllyContractCancelled"
        case allyJoinedWarAggressorMsg = "AllyJoinedWarAggressorMsg"
        case allyJoinedWarAllyMsg = "AllyJoinedWarAllyMsg"
        case allyJoinedWarDefenderMsg = "AllyJoinedWarDefenderMsg"
        case battlePunishFriendlyFire = "BattlePunishFriendlyFire"
        case billOutOfMoneyMsg = "BillOutOfMoneyMsg"
        case billPaidCorpAllMsg = "BillPaidCorpAllMsg"
        case bountyClaimMsg = "BountyClaimMsg"
        case bountyESSShared = "BountyESSShared"
        case bountyESSTaken = "BountyESSTaken"
        case bountyPlacedAlliance = "BountyPlacedAlliance"
        case bountyPlacedChar = "BountyPlacedChar"
        case bountyPlacedCorp = "BountyPlacedCorp"
        case bountyYourBountyClaimed = "BountyYourBountyClaimed"
        case buddyConnectContactAdd = "BuddyConnectContactAdd"
        case charAppAcceptMsg = "CharAppAcceptMsg"
        case charAppRejectMsg = "CharAppRejectMsg"
        case charAppWithdrawMsg = "CharAppWithdrawMsg"
        case charLeftCorpMsg = "CharLeftCorpMsg"
        case charMedalMsg = "CharMedalMsg"
        case charTerminationMsg = "CharTerminationMsg"
        case cloneActivationMsg = "CloneActivationMsg"
        case cloneActivationMsg2 = "CloneActivationMsg2"
        case cloneMovedMsg = "CloneMovedMsg"
        case cloneRevokedMsg1 = "CloneRevokedMsg1"
        case cloneRevokedMsg2 = "CloneRevokedMsg2"
        case combatOperationFinished = "CombatOperationFinished"
        case contactAdd = "ContactAdd"
        case contactEdit = "ContactEdit"
        case containerPasswordMsg = "ContainerPasswordMsg"
        case contractRegionChangedToPochven = "ContractRegionChangedToPochven"
        case corpAllBillMsg = "CorpAllBillMsg"
        case corpAppAcceptMsg = "CorpAppAcceptMsg"
        case corpAppInvitedMsg = "CorpAppInvitedMsg"
        case corpAppNewMsg = "CorpAppNewMsg"
        case corpAppRejectCustomMsg = "CorpAppRejectCustomMsg"
        case corpAppRejectMsg = "CorpAppRejectMsg"
        case corpBecameWarEligible = "CorpBecameWarEligible"
        case corpDividendMsg = "CorpDividendMsg"
        case corpFriendlyFireDisableTimerCompleted = "CorpFriendlyFireDisableTimerCompleted"
        case corpFriendlyFireDisableTimerStarted = "CorpFriendlyFireDisableTimerStarted"
        case corpFriendlyFireEnableTimerCompleted = "CorpFriendlyFireEnableTimerCompleted"
        case corpFriendlyFireEnableTimerStarted = "CorpFriendlyFireEnableTimerStarted"
        case corpKicked = "CorpKicked"
        case corpLiquidationMsg = "CorpLiquidationMsg"
        case corpNewCEOMsg = "CorpNewCEOMsg"
        case corpNewsMsg = "CorpNewsMsg"
        case corpNoLongerWarEligible = "CorpNoLongerWarEligible"
        case corpOfficeExpirationMsg = "CorpOfficeExpirationMsg"
        case corpStructLostMsg = "CorpStructLostMsg"
        case corpTaxChangeMsg = "CorpTaxChangeMsg"
        case corpVoteCEORevokedMsg = "CorpVoteCEORevokedMsg"
        case corpVoteMsg = "CorpVoteMsg"
        case corpWarDeclaredMsg = "CorpWarDeclaredMsg"
        case corpWarDeclaredV2 = "CorpWarDeclaredV2"
        case corpWarFightingLegalMsg = "CorpWarFightingLegalMsg"
        case corpWarInvalidatedMsg = "CorpWarInvalidatedMsg"
        case corpWarRetractedMsg = "CorpWarRetractedMsg"
        case corpWarSurrenderMsg = "CorpWarSurrenderMsg"
        case corporationGoalClosed = "CorporationGoalClosed"
        case corporationGoalCompleted = "CorporationGoalCompleted"
        case corporationGoalCreated = "CorporationGoalCreated"
        case customsMsg = "CustomsMsg"
        case declareWar = "DeclareWar"
        case districtAttacked = "DistrictAttacked"
        case dustAppAcceptedMsg = "DustAppAcceptedMsg"
        case essmainbanklink = "ESSMainBankLink"
        case entosisCaptureStarted = "EntosisCaptureStarted"
        case expertSystemExpired = "ExpertSystemExpired"
        case expertSystemExpiryImminent = "ExpertSystemExpiryImminent"
        case fwalliancekickmsg = "FWAllianceKickMsg"
        case fwalliancewarningmsg = "FWAllianceWarningMsg"
        case fwcharkickmsg = "FWCharKickMsg"
        case fwcharrankgainmsg = "FWCharRankGainMsg"
        case fwcharranklossmsg = "FWCharRankLossMsg"
        case fwcharwarningmsg = "FWCharWarningMsg"
        case fwcorpjoinmsg = "FWCorpJoinMsg"
        case fwcorpkickmsg = "FWCorpKickMsg"
        case fwcorpleavemsg = "FWCorpLeaveMsg"
        case fwcorpwarningmsg = "FWCorpWarningMsg"
        case facWarCorpJoinRequestMsg = "FacWarCorpJoinRequestMsg"
        case facWarCorpJoinWithdrawMsg = "FacWarCorpJoinWithdrawMsg"
        case facWarCorpLeaveRequestMsg = "FacWarCorpLeaveRequestMsg"
        case facWarCorpLeaveWithdrawMsg = "FacWarCorpLeaveWithdrawMsg"
        case facWarLPDisqualifiedEvent = "FacWarLPDisqualifiedEvent"
        case facWarLPDisqualifiedKill = "FacWarLPDisqualifiedKill"
        case facWarLPPayoutEvent = "FacWarLPPayoutEvent"
        case facWarLPPayoutKill = "FacWarLPPayoutKill"
        case gameTimeAdded = "GameTimeAdded"
        case gameTimeReceived = "GameTimeReceived"
        case gameTimeSent = "GameTimeSent"
        case giftReceived = "GiftReceived"
        case ihubdestroyedbybillfailure = "IHubDestroyedByBillFailure"
        case incursionCompletedMsg = "IncursionCompletedMsg"
        case industryOperationFinished = "IndustryOperationFinished"
        case industryTeamAuctionLost = "IndustryTeamAuctionLost"
        case industryTeamAuctionWon = "IndustryTeamAuctionWon"
        case infrastructureHubBillAboutToExpire = "InfrastructureHubBillAboutToExpire"
        case insuranceExpirationMsg = "InsuranceExpirationMsg"
        case insuranceFirstShipMsg = "InsuranceFirstShipMsg"
        case insuranceInvalidatedMsg = "InsuranceInvalidatedMsg"
        case insuranceIssuedMsg = "InsuranceIssuedMsg"
        case insurancePayoutMsg = "InsurancePayoutMsg"
        case invasionCompletedMsg = "InvasionCompletedMsg"
        case invasionSystemLogin = "InvasionSystemLogin"
        case invasionSystemStart = "InvasionSystemStart"
        case jumpCloneDeletedMsg1 = "JumpCloneDeletedMsg1"
        case jumpCloneDeletedMsg2 = "JumpCloneDeletedMsg2"
        case killReportFinalBlow = "KillReportFinalBlow"
        case killReportVictim = "KillReportVictim"
        case killRightAvailable = "KillRightAvailable"
        case killRightAvailableOpen = "KillRightAvailableOpen"
        case killRightEarned = "KillRightEarned"
        case killRightUnavailable = "KillRightUnavailable"
        case killRightUnavailableOpen = "KillRightUnavailableOpen"
        case killRightUsed = "KillRightUsed"
        case locateCharMsg = "LocateCharMsg"
        case madeWarMutual = "MadeWarMutual"
        case mercOfferRetractedMsg = "MercOfferRetractedMsg"
        case mercOfferedNegotiationMsg = "MercOfferedNegotiationMsg"
        case missionCanceledTriglavian = "MissionCanceledTriglavian"
        case missionOfferExpirationMsg = "MissionOfferExpirationMsg"
        case missionTimeoutMsg = "MissionTimeoutMsg"
        case moonminingAutomaticFracture = "MoonminingAutomaticFracture"
        case moonminingExtractionCancelled = "MoonminingExtractionCancelled"
        case moonminingExtractionFinished = "MoonminingExtractionFinished"
        case moonminingExtractionStarted = "MoonminingExtractionStarted"
        case moonminingLaserFired = "MoonminingLaserFired"
        case mutualWarExpired = "MutualWarExpired"
        case mutualWarInviteAccepted = "MutualWarInviteAccepted"
        case mutualWarInviteRejected = "MutualWarInviteRejected"
        case mutualWarInviteSent = "MutualWarInviteSent"
        case npcstandingsgained = "NPCStandingsGained"
        case npcstandingslost = "NPCStandingsLost"
        case offerToAllyRetracted = "OfferToAllyRetracted"
        case offeredSurrender = "OfferedSurrender"
        case offeredToAlly = "OfferedToAlly"
        case officeLeaseCanceledInsufficientStandings = "OfficeLeaseCanceledInsufficientStandings"
        case oldLscMessages = "OldLscMessages"
        case operationFinished = "OperationFinished"
        case orbitalAttacked = "OrbitalAttacked"
        case orbitalReinforced = "OrbitalReinforced"
        case ownershipTransferred = "OwnershipTransferred"
        case raffleCreated = "RaffleCreated"
        case raffleExpired = "RaffleExpired"
        case raffleFinished = "RaffleFinished"
        case reimbursementMsg = "ReimbursementMsg"
        case researchMissionAvailableMsg = "ResearchMissionAvailableMsg"
        case retractsWar = "RetractsWar"
        case seasonalChallengeCompleted = "SeasonalChallengeCompleted"
        case sovAllClaimAquiredMsg = "SovAllClaimAquiredMsg"
        case sovAllClaimLostMsg = "SovAllClaimLostMsg"
        case sovCommandNodeEventStarted = "SovCommandNodeEventStarted"
        case sovCorpBillLateMsg = "SovCorpBillLateMsg"
        case sovCorpClaimFailMsg = "SovCorpClaimFailMsg"
        case sovDisruptorMsg = "SovDisruptorMsg"
        case sovStationEnteredFreeport = "SovStationEnteredFreeport"
        case sovStructureDestroyed = "SovStructureDestroyed"
        case sovStructureReinforced = "SovStructureReinforced"
        case sovStructureSelfDestructCancel = "SovStructureSelfDestructCancel"
        case sovStructureSelfDestructFinished = "SovStructureSelfDestructFinished"
        case sovStructureSelfDestructRequested = "SovStructureSelfDestructRequested"
        case sovereigntyIHDamageMsg = "SovereigntyIHDamageMsg"
        case sovereigntySBUDamageMsg = "SovereigntySBUDamageMsg"
        case sovereigntyTCUDamageMsg = "SovereigntyTCUDamageMsg"
        case stationAggressionMsg1 = "StationAggressionMsg1"
        case stationAggressionMsg2 = "StationAggressionMsg2"
        case stationConquerMsg = "StationConquerMsg"
        case stationServiceDisabled = "StationServiceDisabled"
        case stationServiceEnabled = "StationServiceEnabled"
        case stationStateChangeMsg = "StationStateChangeMsg"
        case storyLineMissionAvailableMsg = "StoryLineMissionAvailableMsg"
        case structureAnchoring = "StructureAnchoring"
        case structureCourierContractChanged = "StructureCourierContractChanged"
        case structureDestroyed = "StructureDestroyed"
        case structureFuelAlert = "StructureFuelAlert"
        case structureImpendingAbandonmentAssetsAtRisk = "StructureImpendingAbandonmentAssetsAtRisk"
        case structureItemsDelivered = "StructureItemsDelivered"
        case structureItemsMovedToSafety = "StructureItemsMovedToSafety"
        case structureLostArmor = "StructureLostArmor"
        case structureLostShields = "StructureLostShields"
        case structureOnline = "StructureOnline"
        case structurePaintPurchased = "StructurePaintPurchased"
        case structureServicesOffline = "StructureServicesOffline"
        case structureUnanchoring = "StructureUnanchoring"
        case structureUnderAttack = "StructureUnderAttack"
        case structureWentHighPower = "StructureWentHighPower"
        case structureWentLowPower = "StructureWentLowPower"
        case structuresJobsCancelled = "StructuresJobsCancelled"
        case structuresJobsPaused = "StructuresJobsPaused"
        case structuresReinforcementChanged = "StructuresReinforcementChanged"
        case towerAlertMsg = "TowerAlertMsg"
        case towerResourceAlertMsg = "TowerResourceAlertMsg"
        case transactionReversalMsg = "TransactionReversalMsg"
        case tutorialMsg = "TutorialMsg"
        case waradopted = "WarAdopted "
        case warAllyInherited = "WarAllyInherited"
        case warAllyOfferDeclinedMsg = "WarAllyOfferDeclinedMsg"
        case warConcordInvalidates = "WarConcordInvalidates"
        case warDeclared = "WarDeclared"
        case warEndedHqSecurityDrop = "WarEndedHqSecurityDrop"
        case warHQRemovedFromSpace = "WarHQRemovedFromSpace"
        case warInherited = "WarInherited"
        case warInvalid = "WarInvalid"
        case warRetracted = "WarRetracted"
        case warRetractedByConcord = "WarRetractedByConcord"
        case warSurrenderDeclinedMsg = "WarSurrenderDeclinedMsg"
        case warSurrenderOfferMsg = "WarSurrenderOfferMsg"
    }
    /** is_read boolean */
    public var isRead: Bool?
    /** notification_id integer */
    public var notificationId: Int64
    /** sender_id integer */
    public var senderId: Int
    /** sender_type string */
    public var senderType: SenderType
    /** text string */
    public var text: String?
    /** timestamp string */
    public var timestamp: Date
    /** type string */
    public var type: ModelType

    public init(isRead: Bool? = nil, notificationId: Int64, senderId: Int, senderType: SenderType, text: String? = nil, timestamp: Date, type: ModelType) {
        self.isRead = isRead
        self.notificationId = notificationId
        self.senderId = senderId
        self.senderType = senderType
        self.text = text
        self.timestamp = timestamp
        self.type = type
    }

    public enum CodingKeys: String, CodingKey { 
        case isRead = "is_read"
        case notificationId = "notification_id"
        case senderId = "sender_id"
        case senderType = "sender_type"
        case text
        case timestamp
        case type
    }

}
