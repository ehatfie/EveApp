//
// GetCorporationsCorporationIdCustomsOffices200Ok.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** 200 ok object */

public struct GetCorporationsCorporationIdCustomsOffices200Ok: Codable {

    public enum StandingLevel: String, Codable { 
        case bad = "bad"
        case excellent = "excellent"
        case good = "good"
        case neutral = "neutral"
        case terrible = "terrible"
    }
    /** Only present if alliance access is allowed */
    public var allianceTaxRate: Float?
    /** standing_level and any standing related tax rate only present when this is true */
    public var allowAccessWithStandings: Bool
    /** allow_alliance_access boolean */
    public var allowAllianceAccess: Bool
    /** bad_standing_tax_rate number */
    public var badStandingTaxRate: Float?
    /** corporation_tax_rate number */
    public var corporationTaxRate: Float?
    /** Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates */
    public var excellentStandingTaxRate: Float?
    /** good_standing_tax_rate number */
    public var goodStandingTaxRate: Float?
    /** neutral_standing_tax_rate number */
    public var neutralStandingTaxRate: Float?
    /** unique ID of this customs office */
    public var officeId: Int64
    /** reinforce_exit_end integer */
    public var reinforceExitEnd: Int
    /** Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack */
    public var reinforceExitStart: Int
    /** Access is allowed only for entities with this level of standing or better */
    public var standingLevel: StandingLevel?
    /** ID of the solar system this customs office is located in */
    public var systemId: Int
    /** terrible_standing_tax_rate number */
    public var terribleStandingTaxRate: Float?

    public init(allianceTaxRate: Float? = nil, allowAccessWithStandings: Bool, allowAllianceAccess: Bool, badStandingTaxRate: Float? = nil, corporationTaxRate: Float? = nil, excellentStandingTaxRate: Float? = nil, goodStandingTaxRate: Float? = nil, neutralStandingTaxRate: Float? = nil, officeId: Int64, reinforceExitEnd: Int, reinforceExitStart: Int, standingLevel: StandingLevel? = nil, systemId: Int, terribleStandingTaxRate: Float? = nil) {
        self.allianceTaxRate = allianceTaxRate
        self.allowAccessWithStandings = allowAccessWithStandings
        self.allowAllianceAccess = allowAllianceAccess
        self.badStandingTaxRate = badStandingTaxRate
        self.corporationTaxRate = corporationTaxRate
        self.excellentStandingTaxRate = excellentStandingTaxRate
        self.goodStandingTaxRate = goodStandingTaxRate
        self.neutralStandingTaxRate = neutralStandingTaxRate
        self.officeId = officeId
        self.reinforceExitEnd = reinforceExitEnd
        self.reinforceExitStart = reinforceExitStart
        self.standingLevel = standingLevel
        self.systemId = systemId
        self.terribleStandingTaxRate = terribleStandingTaxRate
    }

    public enum CodingKeys: String, CodingKey { 
        case allianceTaxRate = "alliance_tax_rate"
        case allowAccessWithStandings = "allow_access_with_standings"
        case allowAllianceAccess = "allow_alliance_access"
        case badStandingTaxRate = "bad_standing_tax_rate"
        case corporationTaxRate = "corporation_tax_rate"
        case excellentStandingTaxRate = "excellent_standing_tax_rate"
        case goodStandingTaxRate = "good_standing_tax_rate"
        case neutralStandingTaxRate = "neutral_standing_tax_rate"
        case officeId = "office_id"
        case reinforceExitEnd = "reinforce_exit_end"
        case reinforceExitStart = "reinforce_exit_start"
        case standingLevel = "standing_level"
        case systemId = "system_id"
        case terribleStandingTaxRate = "terrible_standing_tax_rate"
    }

}
