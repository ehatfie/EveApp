//
// ContractsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class ContractsAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdContracts: String { 
        case tranquility = "tranquility"
    }

    /**
     Get contracts

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdContracts(characterId: Int, datasource: Datasource_getCharactersCharacterIdContracts? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdContracts200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdContractsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get contracts
     - GET /v1/characters/{character_id}/contracts/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdContracts200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdContractsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdContracts? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdContracts200Ok]> {
        var path = "/v1/characters/{character_id}/contracts/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdContracts200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdContractsContractIdBids: String { 
        case tranquility = "tranquility"
    }

    /**
     Get contract bids

     - parameter characterId: (path) An EVE character ID 
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdContractsContractIdBids(characterId: Int, contractId: Int, datasource: Datasource_getCharactersCharacterIdContractsContractIdBids? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdContractsContractIdBids200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdContractsContractIdBidsWithRequestBuilder(characterId: characterId, contractId: contractId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get contract bids
     - GET /v1/characters/{character_id}/contracts/{contract_id}/bids/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdContractsContractIdBids200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdContractsContractIdBidsWithRequestBuilder(characterId: Int, contractId: Int, datasource: Datasource_getCharactersCharacterIdContractsContractIdBids? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdContractsContractIdBids200Ok]> {
        var path = "/v1/characters/{character_id}/contracts/{contract_id}/bids/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdContractsContractIdBids200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdContractsContractIdItems: String { 
        case tranquility = "tranquility"
    }

    /**
     Get contract items

     - parameter characterId: (path) An EVE character ID 
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdContractsContractIdItems(characterId: Int, contractId: Int, datasource: Datasource_getCharactersCharacterIdContractsContractIdItems? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdContractsContractIdItems200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdContractsContractIdItemsWithRequestBuilder(characterId: characterId, contractId: contractId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get contract items
     - GET /v1/characters/{character_id}/contracts/{contract_id}/items/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdContractsContractIdItems200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdContractsContractIdItemsWithRequestBuilder(characterId: Int, contractId: Int, datasource: Datasource_getCharactersCharacterIdContractsContractIdItems? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdContractsContractIdItems200Ok]> {
        var path = "/v1/characters/{character_id}/contracts/{contract_id}/items/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdContractsContractIdItems200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getContractsPublicBidsContractId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get public contract bids

     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getContractsPublicBidsContractId(contractId: Int, datasource: Datasource_getContractsPublicBidsContractId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [GetContractsPublicBidsContractId200Ok]?,_ error: Error?) -> Void)) {
        getContractsPublicBidsContractIdWithRequestBuilder(contractId: contractId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get public contract bids
     - GET /v1/contracts/public/bids/{contract_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[GetContractsPublicBidsContractId200Ok]> 
     */
    @MainActor open class func getContractsPublicBidsContractIdWithRequestBuilder(contractId: Int, datasource: Datasource_getContractsPublicBidsContractId? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[GetContractsPublicBidsContractId200Ok]> {
        var path = "/v1/contracts/public/bids/{contract_id}/"
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetContractsPublicBidsContractId200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getContractsPublicItemsContractId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get public contract items

     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getContractsPublicItemsContractId(contractId: Int, datasource: Datasource_getContractsPublicItemsContractId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [GetContractsPublicItemsContractId200Ok]?,_ error: Error?) -> Void)) {
        getContractsPublicItemsContractIdWithRequestBuilder(contractId: contractId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get public contract items
     - GET /v1/contracts/public/items/{contract_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
}, {
  "is_included" : true,
  "is_blueprint_copy" : true,
  "record_id" : 5,
  "quantity" : 1,
  "material_efficiency" : 15,
  "item_id" : 0,
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0
} ]}]
     - parameter contractId: (path) ID of a contract 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[GetContractsPublicItemsContractId200Ok]> 
     */
    @MainActor open class func getContractsPublicItemsContractIdWithRequestBuilder(contractId: Int, datasource: Datasource_getContractsPublicItemsContractId? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[GetContractsPublicItemsContractId200Ok]> {
        var path = "/v1/contracts/public/items/{contract_id}/"
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetContractsPublicItemsContractId200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getContractsPublicRegionId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get public contracts

     - parameter regionId: (path) An EVE region id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getContractsPublicRegionId(regionId: Int, datasource: Datasource_getContractsPublicRegionId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [GetContractsPublicRegionId200Ok]?,_ error: Error?) -> Void)) {
        getContractsPublicRegionIdWithRequestBuilder(regionId: regionId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get public contracts
     - GET /v1/contracts/public/{region_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
}, {
  "reward" : 3.616076749251911,
  "end_location_id" : 5,
  "issuer_corporation_id" : 2,
  "contract_id" : 1,
  "days_to_complete" : 5,
  "buyout" : 0.8008281904610115,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 2,
  "volume" : 4.145608029883936,
  "issuer_id" : 7,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 9.301444243932576,
  "for_corporation" : true,
  "collateral" : 6.027456183070403
} ]}]
     - parameter regionId: (path) An EVE region id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[GetContractsPublicRegionId200Ok]> 
     */
    @MainActor open class func getContractsPublicRegionIdWithRequestBuilder(regionId: Int, datasource: Datasource_getContractsPublicRegionId? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[GetContractsPublicRegionId200Ok]> {
        var path = "/v1/contracts/public/{region_id}/"
        let regionIdPreEscape = "\(regionId)"
        let regionIdPostEscape = regionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region_id}", with: regionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetContractsPublicRegionId200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdContracts: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation contracts

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdContracts(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContracts? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdContracts200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdContractsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation contracts
     - GET /v1/corporations/{corporation_id}/contracts/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
}, {
  "reward" : 4.145608029883936,
  "end_location_id" : 7,
  "issuer_corporation_id" : 9,
  "contract_id" : 5,
  "days_to_complete" : 2,
  "availability" : "public",
  "buyout" : 1.4658129805029452,
  "title" : "title",
  "type" : "unknown",
  "date_expired" : "2000-01-23T04:56:07.000+00:00",
  "start_location_id" : 7,
  "volume" : 1.2315135367772556,
  "issuer_id" : 3,
  "date_accepted" : "2000-01-23T04:56:07.000+00:00",
  "acceptor_id" : 0,
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "price" : 2.027123023002322,
  "date_completed" : "2000-01-23T04:56:07.000+00:00",
  "for_corporation" : true,
  "collateral" : 5.962133916683182,
  "assignee_id" : 6,
  "status" : "outstanding"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdContracts200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdContractsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContracts? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdContracts200Ok]> {
        var path = "/v1/corporations/{corporation_id}/contracts/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdContracts200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdContractsContractIdBids: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation contract bids

     - parameter contractId: (path) ID of a contract 
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdContractsContractIdBids(contractId: Int, corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContractsContractIdBids? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdContractsContractIdBids200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdContractsContractIdBidsWithRequestBuilder(contractId: contractId, corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation contract bids
     - GET /v1/corporations/{corporation_id}/contracts/{contract_id}/bids/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
}, {
  "bidder_id" : 1,
  "amount" : 0.8008282,
  "bid_id" : 6,
  "date_bid" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter contractId: (path) ID of a contract 
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdContractsContractIdBids200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdContractsContractIdBidsWithRequestBuilder(contractId: Int, corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContractsContractIdBids? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdContractsContractIdBids200Ok]> {
        var path = "/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/"
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdContractsContractIdBids200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdContractsContractIdItems: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation contract items

     - parameter contractId: (path) ID of a contract 
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdContractsContractIdItems(contractId: Int, corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContractsContractIdItems? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdContractsContractIdItems200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdContractsContractIdItemsWithRequestBuilder(contractId: contractId, corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation contract items
     - GET /v1/corporations/{corporation_id}/contracts/{contract_id}/items/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
}, {
  "is_included" : true,
  "record_id" : 1,
  "is_singleton" : true,
  "quantity" : 0,
  "raw_quantity" : 6,
  "type_id" : 5
} ]}]
     - parameter contractId: (path) ID of a contract 
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdContractsContractIdItems200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdContractsContractIdItemsWithRequestBuilder(contractId: Int, corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContractsContractIdItems? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdContractsContractIdItems200Ok]> {
        var path = "/v1/corporations/{corporation_id}/contracts/{contract_id}/items/"
        let contractIdPreEscape = "\(contractId)"
        let contractIdPostEscape = contractIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contract_id}", with: contractIdPostEscape, options: .literal, range: nil)
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdContractsContractIdItems200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
