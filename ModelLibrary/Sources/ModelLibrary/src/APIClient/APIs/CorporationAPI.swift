//
// CorporationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class CorporationAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation information

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationId(corporationId: Int, datasource: Datasource_getCorporationsCorporationId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetCorporationsCorporationIdOk?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation information
     - GET /v5/corporations/{corporation_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "ticker" : "ticker",
  "description" : "description",
  "faction_id" : 5,
  "home_station_id" : 5,
  "tax_rate" : 0.9301444,
  "url" : "url",
  "shares" : 7,
  "alliance_id" : 0,
  "creator_id" : 1,
  "name" : "name",
  "war_eligible" : true,
  "date_founded" : "2000-01-23T04:56:07.000+00:00",
  "member_count" : 2,
  "ceo_id" : 6
}}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetCorporationsCorporationIdOk> 
     */
    @MainActor open class func getCorporationsCorporationIdWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetCorporationsCorporationIdOk> {
        var path = "/v5/corporations/{corporation_id}/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCorporationsCorporationIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdAlliancehistory: String { 
        case tranquility = "tranquility"
    }

    /**
     Get alliance history

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdAlliancehistory(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdAlliancehistory? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdAlliancehistory200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdAlliancehistoryWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get alliance history
     - GET /v3/corporations/{corporation_id}/alliancehistory/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "alliance_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdAlliancehistory200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdAlliancehistoryWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdAlliancehistory? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdAlliancehistory200Ok]> {
        var path = "/v3/corporations/{corporation_id}/alliancehistory/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdAlliancehistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdBlueprints: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation blueprints

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdBlueprints(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBlueprints? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdBlueprints200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdBlueprintsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation blueprints
     - GET /v3/corporations/{corporation_id}/blueprints/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AssetSafety",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdBlueprints200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdBlueprintsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdBlueprints? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdBlueprints200Ok]> {
        var path = "/v3/corporations/{corporation_id}/blueprints/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdBlueprints200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdContainersLogs: String { 
        case tranquility = "tranquility"
    }

    /**
     Get all corporation ALSC logs

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdContainersLogs(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContainersLogs? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdContainersLogs200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdContainersLogsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all corporation ALSC logs
     - GET /v3/corporations/{corporation_id}/containers/logs/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
}, {
  "old_config_bitmask" : 2,
  "quantity" : 7,
  "logged_at" : "2000-01-23T04:56:07.000+00:00",
  "password_type" : "config",
  "container_type_id" : 1,
  "location_flag" : "AssetSafety",
  "type_id" : 9,
  "action" : "add",
  "character_id" : 0,
  "container_id" : 6,
  "location_id" : 5,
  "new_config_bitmask" : 5
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdContainersLogs200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdContainersLogsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdContainersLogs? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdContainersLogs200Ok]> {
        var path = "/v3/corporations/{corporation_id}/containers/logs/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdContainersLogs200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdDivisions: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation divisions

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdDivisions(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdDivisions? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCorporationsCorporationIdDivisionsOk?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdDivisionsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation divisions
     - GET /v2/corporations/{corporation_id}/divisions/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "hangar" : [ {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  }, {
    "division" : 1,
    "name" : "name"
  } ],
  "wallet" : [ {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  }, {
    "division" : 4,
    "name" : "name"
  } ]
}}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCorporationsCorporationIdDivisionsOk> 
     */
    @MainActor open class func getCorporationsCorporationIdDivisionsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdDivisions? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCorporationsCorporationIdDivisionsOk> {
        var path = "/v2/corporations/{corporation_id}/divisions/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCorporationsCorporationIdDivisionsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdFacilities: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation facilities

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdFacilities(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdFacilities? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdFacilities200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdFacilitiesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation facilities
     - GET /v2/corporations/{corporation_id}/facilities/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
}, {
  "system_id" : 6,
  "type_id" : 1,
  "facility_id" : 0
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdFacilities200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdFacilitiesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdFacilities? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdFacilities200Ok]> {
        var path = "/v2/corporations/{corporation_id}/facilities/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdFacilities200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdIcons: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation icon

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdIcons(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdIcons? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetCorporationsCorporationIdIconsOk?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdIconsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation icon
     - GET /v2/corporations/{corporation_id}/icons/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "px256x256" : "px256x256",
  "px64x64" : "px64x64",
  "px128x128" : "px128x128"
}}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetCorporationsCorporationIdIconsOk> 
     */
    @MainActor open class func getCorporationsCorporationIdIconsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdIcons? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetCorporationsCorporationIdIconsOk> {
        var path = "/v2/corporations/{corporation_id}/icons/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCorporationsCorporationIdIconsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMedals: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation medals

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMedals(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMedals? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdMedals200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMedalsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation medals
     - GET /v2/corporations/{corporation_id}/medals/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
}, {
  "medal_id" : 6,
  "creator_id" : 0,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "title" : "title"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdMedals200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdMedalsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMedals? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdMedals200Ok]> {
        var path = "/v2/corporations/{corporation_id}/medals/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdMedals200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMedalsIssued: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation issued medals

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMedalsIssued(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMedalsIssued? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdMedalsIssued200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMedalsIssuedWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation issued medals
     - GET /v2/corporations/{corporation_id}/medals/issued/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
}, {
  "medal_id" : 1,
  "issuer_id" : 6,
  "reason" : "reason",
  "character_id" : 0,
  "issued_at" : "2000-01-23T04:56:07.000+00:00",
  "status" : "private"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdMedalsIssued200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdMedalsIssuedWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMedalsIssued? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdMedalsIssued200Ok]> {
        var path = "/v2/corporations/{corporation_id}/medals/issued/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdMedalsIssued200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMembers: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation members

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMembers(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembers? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMembersWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation members
     - GET /v4/corporations/{corporation_id}/members/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[Int]> 
     */
    @MainActor open class func getCorporationsCorporationIdMembersWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembers? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[Int]> {
        var path = "/v4/corporations/{corporation_id}/members/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMembersLimit: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation member limit

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMembersLimit(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembersLimit? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMembersLimitWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation member limit
     - GET /v2/corporations/{corporation_id}/members/limit/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=0}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Int> 
     */
    @MainActor open class func getCorporationsCorporationIdMembersLimitWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembersLimit? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<Int> {
        var path = "/v2/corporations/{corporation_id}/members/limit/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMembersTitles: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation's members' titles

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMembersTitles(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembersTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdMembersTitles200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMembersTitlesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation's members' titles
     - GET /v2/corporations/{corporation_id}/members/titles/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
}, {
  "character_id" : 0,
  "titles" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ]
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdMembersTitles200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdMembersTitlesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembersTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdMembersTitles200Ok]> {
        var path = "/v2/corporations/{corporation_id}/members/titles/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdMembersTitles200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdMembertracking: String { 
        case tranquility = "tranquility"
    }

    /**
     Track corporation members

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdMembertracking(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembertracking? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdMembertracking200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdMembertrackingWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Track corporation members
     - GET /v2/corporations/{corporation_id}/membertracking/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "logoff_date" : "2000-01-23T04:56:07.000+00:00",
  "ship_type_id" : 5,
  "base_id" : 0,
  "logon_date" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 6,
  "location_id" : 1,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdMembertracking200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdMembertrackingWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdMembertracking? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdMembertracking200Ok]> {
        var path = "/v2/corporations/{corporation_id}/membertracking/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdMembertracking200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdRoles: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation member roles

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdRoles(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdRoles? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdRoles200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdRolesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation member roles
     - GET /v2/corporations/{corporation_id}/roles/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "character_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdRoles200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdRolesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdRoles? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdRoles200Ok]> {
        var path = "/v2/corporations/{corporation_id}/roles/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdRoles200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdRolesHistory: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation member roles history

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdRolesHistory(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdRolesHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdRolesHistory200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdRolesHistoryWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation member roles history
     - GET /v2/corporations/{corporation_id}/roles/history/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
}, {
  "issuer_id" : 6,
  "new_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "old_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "role_type" : "grantable_roles",
  "changed_at" : "2000-01-23T04:56:07.000+00:00",
  "character_id" : 0
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdRolesHistory200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdRolesHistoryWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdRolesHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdRolesHistory200Ok]> {
        var path = "/v2/corporations/{corporation_id}/roles/history/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdRolesHistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdShareholders: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation shareholders

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdShareholders(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdShareholders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdShareholders200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdShareholdersWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation shareholders
     - GET /v1/corporations/{corporation_id}/shareholders/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
}, {
  "share_count" : 0,
  "shareholder_type" : "character",
  "shareholder_id" : 6
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdShareholders200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdShareholdersWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdShareholders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdShareholders200Ok]> {
        var path = "/v1/corporations/{corporation_id}/shareholders/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdShareholders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdStandings: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation standings

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdStandings(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdStandings? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdStandings200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdStandingsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation standings
     - GET /v2/corporations/{corporation_id}/standings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdStandings200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdStandingsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdStandings? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdStandings200Ok]> {
        var path = "/v2/corporations/{corporation_id}/standings/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdStandings200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdStarbases: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation starbases (POSes)

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdStarbases(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdStarbases? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdStarbases200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdStarbasesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation starbases (POSes)
     - GET /v2/corporations/{corporation_id}/starbases/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
}, {
  "unanchor_at" : "2000-01-23T04:56:07.000+00:00",
  "onlined_since" : "2000-01-23T04:56:07.000+00:00",
  "starbase_id" : 6,
  "system_id" : 1,
  "type_id" : 5,
  "moon_id" : 0,
  "state" : "offline",
  "reinforced_until" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdStarbases200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdStarbasesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdStarbases? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdStarbases200Ok]> {
        var path = "/v2/corporations/{corporation_id}/starbases/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdStarbases200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdStarbasesStarbaseId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get starbase (POS) detail

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter starbaseId: (path) An EVE starbase (POS) ID 
     - parameter systemId: (query) The solar system this starbase (POS) is located in, 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdStarbasesStarbaseId(corporationId: Int, starbaseId: Int64, systemId: Int, datasource: Datasource_getCorporationsCorporationIdStarbasesStarbaseId? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCorporationsCorporationIdStarbasesStarbaseIdOk?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdStarbasesStarbaseIdWithRequestBuilder(corporationId: corporationId, starbaseId: starbaseId, systemId: systemId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get starbase (POS) detail
     - GET /v2/corporations/{corporation_id}/starbases/{starbase_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "attack_if_at_war" : true,
  "fuels" : [ {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  }, {
    "quantity" : 1,
    "type_id" : 5
  } ],
  "fuel_bay_take" : "alliance_member",
  "attack_if_other_security_status_dropping" : true,
  "fuel_bay_view" : "alliance_member",
  "offline" : "alliance_member",
  "allow_corporation_members" : true,
  "allow_alliance_members" : true,
  "anchor" : "alliance_member",
  "unanchor" : "alliance_member",
  "attack_standing_threshold" : 6.0274563,
  "use_alliance_standings" : true,
  "online" : "alliance_member",
  "attack_security_status_threshold" : 0.8008282
}}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter starbaseId: (path) An EVE starbase (POS) ID 
     - parameter systemId: (query) The solar system this starbase (POS) is located in, 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCorporationsCorporationIdStarbasesStarbaseIdOk> 
     */
    @MainActor open class func getCorporationsCorporationIdStarbasesStarbaseIdWithRequestBuilder(corporationId: Int, starbaseId: Int64, systemId: Int, datasource: Datasource_getCorporationsCorporationIdStarbasesStarbaseId? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCorporationsCorporationIdStarbasesStarbaseIdOk> {
        var path = "/v2/corporations/{corporation_id}/starbases/{starbase_id}/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let starbaseIdPreEscape = "\(starbaseId)"
        let starbaseIdPostEscape = starbaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{starbase_id}", with: starbaseIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "system_id": systemId.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCorporationsCorporationIdStarbasesStarbaseIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getCorporationsCorporationIdStructures: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdStructures: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getCorporationsCorporationIdStructures: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get corporation structures

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdStructures(corporationId: Int, acceptLanguage: AcceptLanguage_getCorporationsCorporationIdStructures? = nil, datasource: Datasource_getCorporationsCorporationIdStructures? = nil, ifNoneMatch: String? = nil, language: Language_getCorporationsCorporationIdStructures? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdStructures200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdStructuresWithRequestBuilder(corporationId: corporationId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation structures
     - GET /v4/corporations/{corporation_id}/structures/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int), Content-Language(String)]
     - examples: [{contentType=application/json, example=[ {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
}, {
  "corporation_id" : 0,
  "system_id" : 2,
  "type_id" : 7,
  "fuel_expires" : "2000-01-23T04:56:07.000+00:00",
  "reinforce_hour" : 13,
  "structure_id" : 5,
  "services" : [ {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  }, {
    "name" : "name",
    "state" : "online"
  } ],
  "state_timer_end" : "2000-01-23T04:56:07.000+00:00",
  "state_timer_start" : "2000-01-23T04:56:07.000+00:00",
  "profile_id" : 1,
  "name" : "name",
  "state" : "anchor_vulnerable",
  "unanchors_at" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_apply" : "2000-01-23T04:56:07.000+00:00",
  "next_reinforce_hour" : 13
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdStructures200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdStructuresWithRequestBuilder(corporationId: Int, acceptLanguage: AcceptLanguage_getCorporationsCorporationIdStructures? = nil, datasource: Datasource_getCorporationsCorporationIdStructures? = nil, ifNoneMatch: String? = nil, language: Language_getCorporationsCorporationIdStructures? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdStructures200Ok]> {
        var path = "/v4/corporations/{corporation_id}/structures/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdStructures200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdTitles: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation titles

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdTitles(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdTitles200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdTitlesWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation titles
     - GET /v2/corporations/{corporation_id}/titles/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}, {
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "name" : "name",
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "title_id" : 0,
  "grantable_roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "grantable_roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdTitles200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdTitlesWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdTitles200Ok]> {
        var path = "/v2/corporations/{corporation_id}/titles/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdTitles200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsNpccorps: String { 
        case tranquility = "tranquility"
    }

    /**
     Get npc corporations

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsNpccorps(datasource: Datasource_getCorporationsNpccorps? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getCorporationsNpccorpsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get npc corporations
     - GET /v2/corporations/npccorps/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    @MainActor open class func getCorporationsNpccorpsWithRequestBuilder(datasource: Datasource_getCorporationsNpccorps? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v2/corporations/npccorps/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
