//
// MailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class MailAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteCharactersCharacterIdMailLabelsLabelId: String { 
        case tranquility = "tranquility"
    }

    /**
     Delete a mail label

     - parameter characterId: (path) An EVE character ID 
     - parameter labelId: (path) An EVE label id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func deleteCharactersCharacterIdMailLabelsLabelId(characterId: Int, labelId: Int, datasource: Datasource_deleteCharactersCharacterIdMailLabelsLabelId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCharactersCharacterIdMailLabelsLabelIdWithRequestBuilder(characterId: characterId, labelId: labelId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a mail label
     - DELETE /v1/characters/{character_id}/mail/labels/{label_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter characterId: (path) An EVE character ID 
     - parameter labelId: (path) An EVE label id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    @MainActor open class func deleteCharactersCharacterIdMailLabelsLabelIdWithRequestBuilder(characterId: Int, labelId: Int, datasource: Datasource_deleteCharactersCharacterIdMailLabelsLabelId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/characters/{character_id}/mail/labels/{label_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let labelIdPreEscape = "\(labelId)"
        let labelIdPostEscape = labelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{label_id}", with: labelIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteCharactersCharacterIdMailMailId: String { 
        case tranquility = "tranquility"
    }

    /**
     Delete a mail

     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func deleteCharactersCharacterIdMailMailId(characterId: Int, mailId: Int, datasource: Datasource_deleteCharactersCharacterIdMailMailId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: characterId, mailId: mailId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a mail
     - DELETE /v1/characters/{character_id}/mail/{mail_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    @MainActor open class func deleteCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: Int, mailId: Int, datasource: Datasource_deleteCharactersCharacterIdMailMailId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/characters/{character_id}/mail/{mail_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let mailIdPreEscape = "\(mailId)"
        let mailIdPostEscape = mailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mail_id}", with: mailIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMail: String { 
        case tranquility = "tranquility"
    }

    /**
     Return mail headers

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter labels: (query) Fetch only mails that match one or more of the given labels (optional)
     - parameter lastMailId: (query) List only mail with an ID lower than the given ID, if present (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMail(characterId: Int, datasource: Datasource_getCharactersCharacterIdMail? = nil, ifNoneMatch: String? = nil, labels: [Int]? = nil, lastMailId: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdMail200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMailWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, labels: labels, lastMailId: lastMailId, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return mail headers
     - GET /v1/characters/{character_id}/mail/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "mail_id" : 1,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 5
  } ],
  "subject" : "subject",
  "from" : 0,
  "labels" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter labels: (query) Fetch only mails that match one or more of the given labels (optional)
     - parameter lastMailId: (query) List only mail with an ID lower than the given ID, if present (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdMail200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdMailWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdMail? = nil, ifNoneMatch: String? = nil, labels: [Int]? = nil, lastMailId: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdMail200Ok]> {
        var path = "/v1/characters/{character_id}/mail/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "labels": labels, 
                        "last_mail_id": lastMailId?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMail200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailLabels: String { 
        case tranquility = "tranquility"
    }

    /**
     Get mail labels and unread counts

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMailLabels(characterId: Int, datasource: Datasource_getCharactersCharacterIdMailLabels? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdMailLabelsOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMailLabelsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get mail labels and unread counts
     - GET /v3/characters/{character_id}/mail/labels/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "total_unread_count" : 0,
  "labels" : [ {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  }, {
    "unread_count" : 0,
    "color" : "#ffffff",
    "name" : "name",
    "label_id" : 0
  } ]
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdMailLabelsOk> 
     */
    @MainActor open class func getCharactersCharacterIdMailLabelsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdMailLabels? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdMailLabelsOk> {
        var path = "/v3/characters/{character_id}/mail/labels/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdMailLabelsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailLists: String { 
        case tranquility = "tranquility"
    }

    /**
     Return mailing list subscriptions

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMailLists(characterId: Int, datasource: Datasource_getCharactersCharacterIdMailLists? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdMailLists200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMailListsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return mailing list subscriptions
     - GET /v1/characters/{character_id}/mail/lists/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
}, {
  "name" : "name",
  "mailing_list_id" : 0
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdMailListsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdMailLists? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]> {
        var path = "/v1/characters/{character_id}/mail/lists/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailMailId: String { 
        case tranquility = "tranquility"
    }

    /**
     Return a mail

     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMailMailId(characterId: Int, mailId: Int, datasource: Datasource_getCharactersCharacterIdMailMailId? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdMailMailIdOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: characterId, mailId: mailId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return a mail
     - GET /v1/characters/{character_id}/mail/{mail_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "read" : true,
  "recipients" : [ {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  }, {
    "recipient_type" : "alliance",
    "recipient_id" : 1
  } ],
  "subject" : "subject",
  "from" : 0,
  "body" : "body",
  "labels" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdMailMailIdOk> 
     */
    @MainActor open class func getCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: Int, mailId: Int, datasource: Datasource_getCharactersCharacterIdMailMailId? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdMailMailIdOk> {
        var path = "/v1/characters/{character_id}/mail/{mail_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let mailIdPreEscape = "\(mailId)"
        let mailIdPostEscape = mailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mail_id}", with: mailIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdMailMailIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdMail: String { 
        case tranquility = "tranquility"
    }

    /**
     Send a new mail

     - parameter body: (body) The mail to send 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func postCharactersCharacterIdMail(body: PostCharactersCharacterIdMailMail, characterId: Int, datasource: Datasource_postCharactersCharacterIdMail? = nil, token: String? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        postCharactersCharacterIdMailWithRequestBuilder(body: body, characterId: characterId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send a new mail
     - POST /v1/characters/{character_id}/mail/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example=0}]
     - parameter body: (body) The mail to send 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Int> 
     */
    @MainActor open class func postCharactersCharacterIdMailWithRequestBuilder(body: PostCharactersCharacterIdMailMail, characterId: Int, datasource: Datasource_postCharactersCharacterIdMail? = nil, token: String? = nil) -> RequestBuilder<Int> {
        var path = "/v1/characters/{character_id}/mail/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdMailLabels: String { 
        case tranquility = "tranquility"
    }

    /**
     Create a mail label

     - parameter body: (body) Label to create 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func postCharactersCharacterIdMailLabels(body: PostCharactersCharacterIdMailLabelsLabel, characterId: Int, datasource: Datasource_postCharactersCharacterIdMailLabels? = nil, token: String? = nil, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        postCharactersCharacterIdMailLabelsWithRequestBuilder(body: body, characterId: characterId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a mail label
     - POST /v2/characters/{character_id}/mail/labels/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example=0}]
     - parameter body: (body) Label to create 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Int> 
     */
    @MainActor open class func postCharactersCharacterIdMailLabelsWithRequestBuilder(body: PostCharactersCharacterIdMailLabelsLabel, characterId: Int, datasource: Datasource_postCharactersCharacterIdMailLabels? = nil, token: String? = nil) -> RequestBuilder<Int> {
        var path = "/v2/characters/{character_id}/mail/labels/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_putCharactersCharacterIdMailMailId: String { 
        case tranquility = "tranquility"
    }

    /**
     Update metadata about a mail

     - parameter body: (body) Data used to update the mail 
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func putCharactersCharacterIdMailMailId(body: PutCharactersCharacterIdMailMailIdContents, characterId: Int, mailId: Int, datasource: Datasource_putCharactersCharacterIdMailMailId? = nil, token: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putCharactersCharacterIdMailMailIdWithRequestBuilder(body: body, characterId: characterId, mailId: mailId, datasource: datasource, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update metadata about a mail
     - PUT /v1/characters/{character_id}/mail/{mail_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - parameter body: (body) Data used to update the mail 
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Void> 
     */
    @MainActor open class func putCharactersCharacterIdMailMailIdWithRequestBuilder(body: PutCharactersCharacterIdMailMailIdContents, characterId: Int, mailId: Int, datasource: Datasource_putCharactersCharacterIdMailMailId? = nil, token: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/characters/{character_id}/mail/{mail_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let mailIdPreEscape = "\(mailId)"
        let mailIdPostEscape = mailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mail_id}", with: mailIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
