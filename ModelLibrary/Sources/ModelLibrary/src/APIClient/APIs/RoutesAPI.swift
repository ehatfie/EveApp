//
// RoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class RoutesAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getRouteOriginDestination: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter flag
     */
    public enum Flag_getRouteOriginDestination: String { 
        case shortest = "shortest"
        case secure = "secure"
        case insecure = "insecure"
    }

    /**
     Get route

     - parameter destination: (path) destination solar system ID 
     - parameter origin: (path) origin solar system ID 
     - parameter avoid: (query) avoid solar system ID(s) (optional)
     - parameter connections: (query) connected solar system pairs (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter flag: (query) route security preference (optional, default to shortest)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getRouteOriginDestination(destination: Int, origin: Int, avoid: [Int]? = nil, connections: [[Int]]? = nil, datasource: Datasource_getRouteOriginDestination? = nil, flag: Flag_getRouteOriginDestination? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getRouteOriginDestinationWithRequestBuilder(destination: destination, origin: origin, avoid: avoid, connections: connections, datasource: datasource, flag: flag, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get route
     - GET /v1/route/{origin}/{destination}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter destination: (path) destination solar system ID 
     - parameter origin: (path) origin solar system ID 
     - parameter avoid: (query) avoid solar system ID(s) (optional)
     - parameter connections: (query) connected solar system pairs (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter flag: (query) route security preference (optional, default to shortest)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    @MainActor open class func getRouteOriginDestinationWithRequestBuilder(destination: Int, origin: Int, avoid: [Int]? = nil, connections: [[Int]]? = nil, datasource: Datasource_getRouteOriginDestination? = nil, flag: Flag_getRouteOriginDestination? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        var path = "/v1/route/{origin}/{destination}/"
        let destinationPreEscape = "\(destination)"
        let destinationPostEscape = destinationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{destination}", with: destinationPostEscape, options: .literal, range: nil)
        let originPreEscape = "\(origin)"
        let originPostEscape = originPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{origin}", with: originPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "avoid": avoid, 
                        "connections": connections, 
                        "datasource": datasource?.rawValue, 
                        "flag": flag?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
