//
// MarketAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MarketAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdOrders: String { 
        case tranquility = "tranquility"
    }

    /**
     List open orders from a character

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdOrders(characterId: Int, datasource: Datasource_getCharactersCharacterIdOrders? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdOrders200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdOrdersWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List open orders from a character
     - GET /v2/characters/{character_id}/orders/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdOrders200Ok]> 
     */
    open class func getCharactersCharacterIdOrdersWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdOrders? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdOrders200Ok]> {
        var path = "/v2/characters/{character_id}/orders/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdOrders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdOrdersHistory: String { 
        case tranquility = "tranquility"
    }

    /**
     List historical orders by a character

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdOrdersHistory(characterId: Int, datasource: Datasource_getCharactersCharacterIdOrdersHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdOrdersHistory200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdOrdersHistoryWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List historical orders by a character
     - GET /v1/characters/{character_id}/orders/history/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
}, {
  "type_id" : 9,
  "region_id" : 7,
  "range" : "1",
  "volume_total" : 2,
  "location_id" : 1,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 2.3021358869347655,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "is_corporation" : true,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 3
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdOrdersHistory200Ok]> 
     */
    open class func getCharactersCharacterIdOrdersHistoryWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdOrdersHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdOrdersHistory200Ok]> {
        var path = "/v1/characters/{character_id}/orders/history/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdOrdersHistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdOrders: String { 
        case tranquility = "tranquility"
    }

    /**
     List open orders from a corporation

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCorporationsCorporationIdOrders(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdOrders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdOrders200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdOrdersWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List open orders from a corporation
     - GET /v3/corporations/{corporation_id}/orders/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdOrders200Ok]> 
     */
    open class func getCorporationsCorporationIdOrdersWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdOrders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdOrders200Ok]> {
        var path = "/v3/corporations/{corporation_id}/orders/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdOrders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdOrdersHistory: String { 
        case tranquility = "tranquility"
    }

    /**
     List historical orders from a corporation

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCorporationsCorporationIdOrdersHistory(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdOrdersHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdOrdersHistory200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdOrdersHistoryWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List historical orders from a corporation
     - GET /v2/corporations/{corporation_id}/orders/history/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
}, {
  "issued_by" : 1,
  "type_id" : 3,
  "region_id" : 9,
  "range" : "1",
  "volume_total" : 4,
  "location_id" : 5,
  "duration" : 0,
  "min_volume" : 5,
  "is_buy_order" : true,
  "price" : 7.061401241503109,
  "wallet_division" : 5,
  "escrow" : 6.027456183070403,
  "state" : "cancelled",
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 2,
  "volume_remain" : 2
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdOrdersHistory200Ok]> 
     */
    open class func getCorporationsCorporationIdOrdersHistoryWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdOrdersHistory? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdOrdersHistory200Ok]> {
        var path = "/v2/corporations/{corporation_id}/orders/history/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdOrdersHistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsGroups: String { 
        case tranquility = "tranquility"
    }

    /**
     Get item groups

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsGroups(datasource: Datasource_getMarketsGroups? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getMarketsGroupsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item groups
     - GET /v1/markets/groups/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getMarketsGroupsWithRequestBuilder(datasource: Datasource_getMarketsGroups? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/markets/groups/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getMarketsGroupsMarketGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsGroupsMarketGroupId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getMarketsGroupsMarketGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get item group information

     - parameter marketGroupId: (path) An Eve item group ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsGroupsMarketGroupId(marketGroupId: Int, acceptLanguage: AcceptLanguage_getMarketsGroupsMarketGroupId? = nil, datasource: Datasource_getMarketsGroupsMarketGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getMarketsGroupsMarketGroupId? = nil, completion: @escaping ((_ data: GetMarketsGroupsMarketGroupIdOk?,_ error: Error?) -> Void)) {
        getMarketsGroupsMarketGroupIdWithRequestBuilder(marketGroupId: marketGroupId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item group information
     - GET /v1/markets/groups/{market_group_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "types" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  "parent_group_id" : 6,
  "name" : "name",
  "description" : "description",
  "market_group_id" : 0
}}]
     - parameter marketGroupId: (path) An Eve item group ID 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetMarketsGroupsMarketGroupIdOk> 
     */
    open class func getMarketsGroupsMarketGroupIdWithRequestBuilder(marketGroupId: Int, acceptLanguage: AcceptLanguage_getMarketsGroupsMarketGroupId? = nil, datasource: Datasource_getMarketsGroupsMarketGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getMarketsGroupsMarketGroupId? = nil) -> RequestBuilder<GetMarketsGroupsMarketGroupIdOk> {
        var path = "/v1/markets/groups/{market_group_id}/"
        let marketGroupIdPreEscape = "\(marketGroupId)"
        let marketGroupIdPostEscape = marketGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{market_group_id}", with: marketGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetMarketsGroupsMarketGroupIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsPrices: String { 
        case tranquility = "tranquility"
    }

    /**
     List market prices

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsPrices(datasource: Datasource_getMarketsPrices? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetMarketsPrices200Ok]?,_ error: Error?) -> Void)) {
        getMarketsPricesWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List market prices
     - GET /v1/markets/prices/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
}, {
  "adjusted_price" : 0.8008281904610115,
  "type_id" : 1,
  "average_price" : 6.027456183070403
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetMarketsPrices200Ok]> 
     */
    open class func getMarketsPricesWithRequestBuilder(datasource: Datasource_getMarketsPrices? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetMarketsPrices200Ok]> {
        let path = "/v1/markets/prices/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetMarketsPrices200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsRegionIdHistory: String { 
        case tranquility = "tranquility"
    }

    /**
     List historical market statistics in a region

     - parameter regionId: (path) Return statistics in this region 
     - parameter typeId: (query) Return statistics for this type 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsRegionIdHistory(regionId: Int, typeId: Int, datasource: Datasource_getMarketsRegionIdHistory? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetMarketsRegionIdHistory200Ok]?,_ error: Error?) -> Void)) {
        getMarketsRegionIdHistoryWithRequestBuilder(regionId: regionId, typeId: typeId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List historical market statistics in a region
     - GET /v1/markets/{region_id}/history/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
}, {
  "date" : "2000-01-23",
  "volume" : 5,
  "average" : 0.8008281904610115,
  "order_count" : 5,
  "highest" : 6.027456183070403,
  "lowest" : 1.4658129805029452
} ]}]
     - parameter regionId: (path) Return statistics in this region 
     - parameter typeId: (query) Return statistics for this type 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetMarketsRegionIdHistory200Ok]> 
     */
    open class func getMarketsRegionIdHistoryWithRequestBuilder(regionId: Int, typeId: Int, datasource: Datasource_getMarketsRegionIdHistory? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetMarketsRegionIdHistory200Ok]> {
        var path = "/v1/markets/{region_id}/history/"
        let regionIdPreEscape = "\(regionId)"
        let regionIdPostEscape = regionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region_id}", with: regionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "type_id": typeId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetMarketsRegionIdHistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter orderType
     */
    public enum OrderType_getMarketsRegionIdOrders: String { 
        case buy = "buy"
        case sell = "sell"
        case all = "all"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsRegionIdOrders: String { 
        case tranquility = "tranquility"
    }

    /**
     List orders in a region

     - parameter orderType: (query) Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders 
     - parameter regionId: (path) Return orders in this region 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter typeId: (query) Return orders only for this type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsRegionIdOrders(orderType: OrderType_getMarketsRegionIdOrders, regionId: Int, datasource: Datasource_getMarketsRegionIdOrders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, typeId: Int? = nil, completion: @escaping ((_ data: [GetMarketsRegionIdOrders200Ok]?,_ error: Error?) -> Void)) {
        getMarketsRegionIdOrdersWithRequestBuilder(orderType: orderType, regionId: regionId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, typeId: typeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List orders in a region
     - GET /v1/markets/{region_id}/orders/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "system_id" : 2,
  "type_id" : 7,
  "range" : "station",
  "volume_total" : 3,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 9,
  "location_id" : 6
} ]}]
     - parameter orderType: (query) Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders 
     - parameter regionId: (path) Return orders in this region 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter typeId: (query) Return orders only for this type (optional)

     - returns: RequestBuilder<[GetMarketsRegionIdOrders200Ok]> 
     */
    open class func getMarketsRegionIdOrdersWithRequestBuilder(orderType: OrderType_getMarketsRegionIdOrders, regionId: Int, datasource: Datasource_getMarketsRegionIdOrders? = nil, ifNoneMatch: String? = nil, page: Int? = nil, typeId: Int? = nil) -> RequestBuilder<[GetMarketsRegionIdOrders200Ok]> {
        var path = "/v1/markets/{region_id}/orders/"
        let regionIdPreEscape = "\(regionId)"
        let regionIdPostEscape = regionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region_id}", with: regionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "order_type": orderType.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "type_id": typeId?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetMarketsRegionIdOrders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsRegionIdTypes: String { 
        case tranquility = "tranquility"
    }

    /**
     List type IDs relevant to a market

     - parameter regionId: (path) Return statistics in this region 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsRegionIdTypes(regionId: Int, datasource: Datasource_getMarketsRegionIdTypes? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getMarketsRegionIdTypesWithRequestBuilder(regionId: regionId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List type IDs relevant to a market
     - GET /v1/markets/{region_id}/types/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter regionId: (path) Return statistics in this region 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getMarketsRegionIdTypesWithRequestBuilder(regionId: Int, datasource: Datasource_getMarketsRegionIdTypes? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[Int]> {
        var path = "/v1/markets/{region_id}/types/"
        let regionIdPreEscape = "\(regionId)"
        let regionIdPostEscape = regionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region_id}", with: regionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsStructuresStructureId: String { 
        case tranquility = "tranquility"
    }

    /**
     List orders in a structure

     - parameter structureId: (path) Return orders in this structure 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMarketsStructuresStructureId(structureId: Int64, datasource: Datasource_getMarketsStructuresStructureId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetMarketsStructuresStructureId200Ok]?,_ error: Error?) -> Void)) {
        getMarketsStructuresStructureIdWithRequestBuilder(structureId: structureId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List orders in a structure
     - GET /v1/markets/structures/{structure_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
}, {
  "duration" : 0,
  "min_volume" : 1,
  "is_buy_order" : true,
  "price" : 5.637376656633329,
  "type_id" : 2,
  "range" : "station",
  "volume_total" : 9,
  "issued" : "2000-01-23T04:56:07.000+00:00",
  "order_id" : 5,
  "volume_remain" : 7,
  "location_id" : 6
} ]}]
     - parameter structureId: (path) Return orders in this structure 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetMarketsStructuresStructureId200Ok]> 
     */
    open class func getMarketsStructuresStructureIdWithRequestBuilder(structureId: Int64, datasource: Datasource_getMarketsStructuresStructureId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetMarketsStructuresStructureId200Ok]> {
        var path = "/v1/markets/structures/{structure_id}/"
        let structureIdPreEscape = "\(structureId)"
        let structureIdPostEscape = structureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{structure_id}", with: structureIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetMarketsStructuresStructureId200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
