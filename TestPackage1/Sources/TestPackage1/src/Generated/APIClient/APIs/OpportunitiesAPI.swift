//
// OpportunitiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class OpportunitiesAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdOpportunities: String { 
        case tranquility = "tranquility"
    }

    /**
     Get a character's completed tasks

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharactersCharacterIdOpportunities(characterId: Int, datasource: Datasource_getCharactersCharacterIdOpportunities? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdOpportunities200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdOpportunitiesWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a character's completed tasks
     - GET /v1/characters/{character_id}/opportunities/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
}, {
  "completed_at" : "2000-01-23T04:56:07.000+00:00",
  "task_id" : 0
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdOpportunities200Ok]> 
     */
    open class func getCharactersCharacterIdOpportunitiesWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdOpportunities? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdOpportunities200Ok]> {
        var path = "/v1/characters/{character_id}/opportunities/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdOpportunities200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getOpportunitiesGroups: String { 
        case tranquility = "tranquility"
    }

    /**
     Get opportunities groups

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpportunitiesGroups(datasource: Datasource_getOpportunitiesGroups? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getOpportunitiesGroupsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get opportunities groups
     - GET /v1/opportunities/groups/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getOpportunitiesGroupsWithRequestBuilder(datasource: Datasource_getOpportunitiesGroups? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/opportunities/groups/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getOpportunitiesGroupsGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getOpportunitiesGroupsGroupId: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getOpportunitiesGroupsGroupId: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Get opportunities group

     - parameter groupId: (path) ID of an opportunities group 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpportunitiesGroupsGroupId(groupId: Int, acceptLanguage: AcceptLanguage_getOpportunitiesGroupsGroupId? = nil, datasource: Datasource_getOpportunitiesGroupsGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getOpportunitiesGroupsGroupId? = nil, completion: @escaping ((_ data: GetOpportunitiesGroupsGroupIdOk?,_ error: Error?) -> Void)) {
        getOpportunitiesGroupsGroupIdWithRequestBuilder(groupId: groupId, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get opportunities group
     - GET /v1/opportunities/groups/{group_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "notification" : "notification",
  "group_id" : 6,
  "name" : "name",
  "description" : "description",
  "connected_groups" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  "required_tasks" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
}}]
     - parameter groupId: (path) ID of an opportunities group 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)

     - returns: RequestBuilder<GetOpportunitiesGroupsGroupIdOk> 
     */
    open class func getOpportunitiesGroupsGroupIdWithRequestBuilder(groupId: Int, acceptLanguage: AcceptLanguage_getOpportunitiesGroupsGroupId? = nil, datasource: Datasource_getOpportunitiesGroupsGroupId? = nil, ifNoneMatch: String? = nil, language: Language_getOpportunitiesGroupsGroupId? = nil) -> RequestBuilder<GetOpportunitiesGroupsGroupIdOk> {
        var path = "/v1/opportunities/groups/{group_id}/"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetOpportunitiesGroupsGroupIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getOpportunitiesTasks: String { 
        case tranquility = "tranquility"
    }

    /**
     Get opportunities tasks

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpportunitiesTasks(datasource: Datasource_getOpportunitiesTasks? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getOpportunitiesTasksWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get opportunities tasks
     - GET /v1/opportunities/tasks/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getOpportunitiesTasksWithRequestBuilder(datasource: Datasource_getOpportunitiesTasks? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/opportunities/tasks/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getOpportunitiesTasksTaskId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get opportunities task

     - parameter taskId: (path) ID of an opportunities task 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpportunitiesTasksTaskId(taskId: Int, datasource: Datasource_getOpportunitiesTasksTaskId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetOpportunitiesTasksTaskIdOk?,_ error: Error?) -> Void)) {
        getOpportunitiesTasksTaskIdWithRequestBuilder(taskId: taskId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get opportunities task
     - GET /v1/opportunities/tasks/{task_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "notification" : "notification",
  "name" : "name",
  "description" : "description",
  "task_id" : 0
}}]
     - parameter taskId: (path) ID of an opportunities task 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetOpportunitiesTasksTaskIdOk> 
     */
    open class func getOpportunitiesTasksTaskIdWithRequestBuilder(taskId: Int, datasource: Datasource_getOpportunitiesTasksTaskId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetOpportunitiesTasksTaskIdOk> {
        var path = "/v1/opportunities/tasks/{task_id}/"
        let taskIdPreEscape = "\(taskId)"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetOpportunitiesTasksTaskIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
