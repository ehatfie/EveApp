//
// WarsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WarsAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getWars: String { 
        case tranquility = "tranquility"
    }

    /**
     List wars

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter maxWarId: (query) Only return wars with ID smaller than this (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWars(datasource: Datasource_getWars? = nil, ifNoneMatch: String? = nil, maxWarId: Int? = nil, completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getWarsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch, maxWarId: maxWarId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List wars
     - GET /v1/wars/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter maxWarId: (query) Only return wars with ID smaller than this (optional)

     - returns: RequestBuilder<[Int]> 
     */
    open class func getWarsWithRequestBuilder(datasource: Datasource_getWars? = nil, ifNoneMatch: String? = nil, maxWarId: Int? = nil) -> RequestBuilder<[Int]> {
        let path = "/v1/wars/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "max_war_id": maxWarId?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Int]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getWarsWarId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get war information

     - parameter warId: (path) ID for a war 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWarsWarId(warId: Int, datasource: Datasource_getWarsWarId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetWarsWarIdOk?,_ error: Error?) -> Void)) {
        getWarsWarIdWithRequestBuilder(warId: warId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get war information
     - GET /v1/wars/{war_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "declared" : "2000-01-23T04:56:07.000+00:00",
  "aggressor" : {
    "alliance_id" : 0,
    "corporation_id" : 6,
    "isk_destroyed" : 1.4658129,
    "ships_killed" : 5
  },
  "open_for_allies" : true,
  "retracted" : "2000-01-23T04:56:07.000+00:00",
  "mutual" : true,
  "finished" : "2000-01-23T04:56:07.000+00:00",
  "started" : "2000-01-23T04:56:07.000+00:00",
  "id" : 4,
  "allies" : [ {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  }, {
    "alliance_id" : 5,
    "corporation_id" : 2
  } ],
  "defender" : {
    "alliance_id" : 7,
    "corporation_id" : 9,
    "isk_destroyed" : 3.6160767,
    "ships_killed" : 2
  }
}}]
     - parameter warId: (path) ID for a war 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetWarsWarIdOk> 
     */
    open class func getWarsWarIdWithRequestBuilder(warId: Int, datasource: Datasource_getWarsWarId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetWarsWarIdOk> {
        var path = "/v1/wars/{war_id}/"
        let warIdPreEscape = "\(warId)"
        let warIdPostEscape = warIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{war_id}", with: warIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetWarsWarIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getWarsWarIdKillmails: String { 
        case tranquility = "tranquility"
    }

    /**
     List kills for a war

     - parameter warId: (path) A valid war ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWarsWarIdKillmails(warId: Int, datasource: Datasource_getWarsWarIdKillmails? = nil, ifNoneMatch: String? = nil, page: Int? = nil, completion: @escaping ((_ data: [GetWarsWarIdKillmails200Ok]?,_ error: Error?) -> Void)) {
        getWarsWarIdKillmailsWithRequestBuilder(warId: warId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List kills for a war
     - GET /v1/wars/{war_id}/killmails/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
}, {
  "killmail_hash" : "killmail_hash",
  "killmail_id" : 0
} ]}]
     - parameter warId: (path) A valid war ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)

     - returns: RequestBuilder<[GetWarsWarIdKillmails200Ok]> 
     */
    open class func getWarsWarIdKillmailsWithRequestBuilder(warId: Int, datasource: Datasource_getWarsWarIdKillmails? = nil, ifNoneMatch: String? = nil, page: Int? = nil) -> RequestBuilder<[GetWarsWarIdKillmails200Ok]> {
        var path = "/v1/wars/{war_id}/killmails/"
        let warIdPreEscape = "\(warId)"
        let warIdPostEscape = warIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{war_id}", with: warIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetWarsWarIdKillmails200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
