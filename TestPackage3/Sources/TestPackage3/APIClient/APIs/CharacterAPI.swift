//
// CharacterAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class CharacterAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterId: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character's public information

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterId(characterId: Int, datasource: Datasource_getCharactersCharacterId? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character's public information
     - GET /v5/characters/{character_id}/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "birthday" : "2000-01-23T04:56:07.000+00:00",
  "alliance_id" : 0,
  "corporation_id" : 1,
  "security_status" : -5.395728,
  "gender" : "female",
  "race_id" : 5,
  "name" : "name",
  "description" : "description",
  "faction_id" : 5,
  "title" : "title",
  "bloodline_id" : 6
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdOk> 
     */
    @MainActor open class func getCharactersCharacterIdWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterId? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetCharactersCharacterIdOk> {
        var path = "/v5/characters/{character_id}/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdAgentsResearch: String { 
        case tranquility = "tranquility"
    }

    /**
     Get agents research

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdAgentsResearch(characterId: Int, datasource: Datasource_getCharactersCharacterIdAgentsResearch? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdAgentsResearch200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdAgentsResearchWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get agents research
     - GET /v2/characters/{character_id}/agents_research/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
}, {
  "remainder_points" : 1.4658129,
  "agent_id" : 0,
  "skill_type_id" : 5,
  "started_at" : "2000-01-23T04:56:07.000+00:00",
  "points_per_day" : 6.0274563
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdAgentsResearch200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdAgentsResearchWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdAgentsResearch? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdAgentsResearch200Ok]> {
        var path = "/v2/characters/{character_id}/agents_research/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdAgentsResearch200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdBlueprints: String { 
        case tranquility = "tranquility"
    }

    /**
     Get blueprints

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdBlueprints(characterId: Int, datasource: Datasource_getCharactersCharacterIdBlueprints? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdBlueprints200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdBlueprintsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get blueprints
     - GET /v3/characters/{character_id}/blueprints/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
}, {
  "quantity" : -1,
  "material_efficiency" : 3,
  "item_id" : 0,
  "location_flag" : "AutoFit",
  "time_efficiency" : 4,
  "type_id" : 7,
  "runs" : 0,
  "location_id" : 6
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdBlueprints200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdBlueprintsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdBlueprints? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdBlueprints200Ok]> {
        var path = "/v3/characters/{character_id}/blueprints/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdBlueprints200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdCorporationhistory: String { 
        case tranquility = "tranquility"
    }

    /**
     Get corporation history

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdCorporationhistory(characterId: Int, datasource: Datasource_getCharactersCharacterIdCorporationhistory? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdCorporationhistory200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdCorporationhistoryWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get corporation history
     - GET /v2/characters/{character_id}/corporationhistory/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "record_id" : 6,
  "corporation_id" : 0,
  "is_deleted" : true,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdCorporationhistory200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdCorporationhistoryWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdCorporationhistory? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdCorporationhistory200Ok]> {
        var path = "/v2/characters/{character_id}/corporationhistory/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdCorporationhistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdFatigue: String { 
        case tranquility = "tranquility"
    }

    /**
     Get jump fatigue

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdFatigue(characterId: Int, datasource: Datasource_getCharactersCharacterIdFatigue? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdFatigueOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdFatigueWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get jump fatigue
     - GET /v2/characters/{character_id}/fatigue/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "last_jump_date" : "2000-01-23T04:56:07.000+00:00",
  "jump_fatigue_expire_date" : "2000-01-23T04:56:07.000+00:00",
  "last_update_date" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdFatigueOk> 
     */
    @MainActor open class func getCharactersCharacterIdFatigueWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdFatigue? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdFatigueOk> {
        var path = "/v2/characters/{character_id}/fatigue/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdFatigueOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMedals: String { 
        case tranquility = "tranquility"
    }

    /**
     Get medals

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMedals(characterId: Int, datasource: Datasource_getCharactersCharacterIdMedals? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdMedals200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMedalsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get medals
     - GET /v2/characters/{character_id}/medals/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "medal_id" : 2,
  "issuer_id" : 5,
  "reason" : "reason",
  "corporation_id" : 0,
  "description" : "description",
  "graphics" : [ {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  }, {
    "color" : 6,
    "part" : 5,
    "graphic" : "graphic",
    "layer" : 1
  } ],
  "title" : "title",
  "status" : "public"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdMedals200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdMedalsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdMedals? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdMedals200Ok]> {
        var path = "/v2/characters/{character_id}/medals/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMedals200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdNotifications: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character notifications

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdNotifications(characterId: Int, datasource: Datasource_getCharactersCharacterIdNotifications? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdNotifications200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdNotificationsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character notifications
     - GET /v5/characters/{character_id}/notifications/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "is_read" : true,
  "sender_type" : "character",
  "notification_id" : 0,
  "text" : "text",
  "type" : "AcceptedAlly",
  "sender_id" : 6,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdNotifications200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdNotificationsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdNotifications? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdNotifications200Ok]> {
        var path = "/v5/characters/{character_id}/notifications/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdNotifications200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdNotificationsContacts: String { 
        case tranquility = "tranquility"
    }

    /**
     Get new contact notifications

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdNotificationsContacts(characterId: Int, datasource: Datasource_getCharactersCharacterIdNotificationsContacts? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdNotificationsContacts200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdNotificationsContactsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get new contact notifications
     - GET /v2/characters/{character_id}/notifications/contacts/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
}, {
  "send_date" : "2000-01-23T04:56:07.000+00:00",
  "sender_character_id" : 6,
  "standing_level" : 1.4658129,
  "notification_id" : 0,
  "message" : "message"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdNotificationsContacts200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdNotificationsContactsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdNotificationsContacts? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdNotificationsContacts200Ok]> {
        var path = "/v2/characters/{character_id}/notifications/contacts/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdNotificationsContacts200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdPortrait: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character portraits

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdPortrait(characterId: Int, datasource: Datasource_getCharactersCharacterIdPortrait? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdPortraitOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdPortraitWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character portraits
     - GET /v2/characters/{character_id}/portrait/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "px256x256" : "px256x256",
  "px512x512" : "px512x512",
  "px64x64" : "px64x64",
  "px128x128" : "px128x128"
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdPortraitOk> 
     */
    @MainActor open class func getCharactersCharacterIdPortraitWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdPortrait? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<GetCharactersCharacterIdPortraitOk> {
        var path = "/v2/characters/{character_id}/portrait/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdPortraitOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdRoles: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character corporation roles

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdRoles(characterId: Int, datasource: Datasource_getCharactersCharacterIdRoles? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdRolesOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdRolesWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character corporation roles
     - GET /v3/characters/{character_id}/roles/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "roles_at_other" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_base" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ],
  "roles_at_hq" : [ "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1", "Account_Take_1" ]
}}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdRolesOk> 
     */
    @MainActor open class func getCharactersCharacterIdRolesWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdRoles? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdRolesOk> {
        var path = "/v3/characters/{character_id}/roles/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdRolesOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdStandings: String { 
        case tranquility = "tranquility"
    }

    /**
     Get standings

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdStandings(characterId: Int, datasource: Datasource_getCharactersCharacterIdStandings? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdStandings200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdStandingsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get standings
     - GET /v2/characters/{character_id}/standings/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
}, {
  "from_type" : "agent",
  "standing" : 6.0274563,
  "from_id" : 0
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdStandings200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdStandingsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdStandings? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdStandings200Ok]> {
        var path = "/v2/characters/{character_id}/standings/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdStandings200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdTitles: String { 
        case tranquility = "tranquility"
    }

    /**
     Get character corporation titles

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdTitles(characterId: Int, datasource: Datasource_getCharactersCharacterIdTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdTitles200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdTitlesWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get character corporation titles
     - GET /v2/characters/{character_id}/titles/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
}, {
  "name" : "name",
  "title_id" : 0
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdTitles200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdTitlesWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdTitles? = nil, ifNoneMatch: String? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdTitles200Ok]> {
        var path = "/v2/characters/{character_id}/titles/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdTitles200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersAffiliation: String { 
        case tranquility = "tranquility"
    }

    /**
     Character affiliation

     - parameter body: (body) The character IDs to fetch affiliations for. All characters must exist, or none will be returned 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func postCharactersAffiliation(body: [Int], datasource: Datasource_postCharactersAffiliation? = nil, completion: @escaping ((_ data: [PostCharactersAffiliation200Ok]?,_ error: Error?) -> Void)) {
        postCharactersAffiliationWithRequestBuilder(body: body, datasource: datasource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Character affiliation
     - POST /v2/characters/affiliation/

     - examples: [{contentType=application/json, example=[ {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
}, {
  "alliance_id" : 0,
  "corporation_id" : 1,
  "faction_id" : 5,
  "character_id" : 6
} ]}]
     - parameter body: (body) The character IDs to fetch affiliations for. All characters must exist, or none will be returned 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[PostCharactersAffiliation200Ok]> 
     */
    @MainActor open class func postCharactersAffiliationWithRequestBuilder(body: [Int], datasource: Datasource_postCharactersAffiliation? = nil) -> RequestBuilder<[PostCharactersAffiliation200Ok]> {
        let path = "/v2/characters/affiliation/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])


        let requestBuilder: RequestBuilder<[PostCharactersAffiliation200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdCspa: String { 
        case tranquility = "tranquility"
    }

    /**
     Calculate a CSPA charge cost

     - parameter body: (body) The target characters to calculate the charge for 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func postCharactersCharacterIdCspa(body: [Int], characterId: Int, datasource: Datasource_postCharactersCharacterIdCspa? = nil, token: String? = nil, completion: @escaping ((_ data: Float?,_ error: Error?) -> Void)) {
        postCharactersCharacterIdCspaWithRequestBuilder(body: body, characterId: characterId, datasource: datasource, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculate a CSPA charge cost
     - POST /v5/characters/{character_id}/cspa/

     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example=0.8008282}]
     - parameter body: (body) The target characters to calculate the charge for 
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<Float> 
     */
    @MainActor open class func postCharactersCharacterIdCspaWithRequestBuilder(body: [Int], characterId: Int, datasource: Datasource_postCharactersCharacterIdCspa? = nil, token: String? = nil) -> RequestBuilder<Float> {
        var path = "/v5/characters/{character_id}/cspa/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "token": token
        ])


        let requestBuilder: RequestBuilder<Float>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
