//
// IndustryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class IndustryAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdIndustryJobs: String { 
        case tranquility = "tranquility"
    }

    /**
     List character industry jobs

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter includeCompleted: (query) Whether to retrieve completed character industry jobs. Only includes jobs from the past 90 days (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdIndustryJobs(characterId: Int, datasource: Datasource_getCharactersCharacterIdIndustryJobs? = nil, ifNoneMatch: String? = nil, includeCompleted: Bool? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdIndustryJobs200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdIndustryJobsWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, includeCompleted: includeCompleted, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List character industry jobs
     - GET /v1/characters/{character_id}/industry/jobs/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.2315135,
  "station_id" : 6,
  "output_location_id" : 7,
  "product_type_id" : 1,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 1,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter includeCompleted: (query) Whether to retrieve completed character industry jobs. Only includes jobs from the past 90 days (optional)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdIndustryJobs200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdIndustryJobsWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdIndustryJobs? = nil, ifNoneMatch: String? = nil, includeCompleted: Bool? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdIndustryJobs200Ok]> {
        var path = "/v1/characters/{character_id}/industry/jobs/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "include_completed": includeCompleted, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdIndustryJobs200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMining: String { 
        case tranquility = "tranquility"
    }

    /**
     Character mining ledger

     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdMining(characterId: Int, datasource: Datasource_getCharactersCharacterIdMining? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCharactersCharacterIdMining200Ok]?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdMiningWithRequestBuilder(characterId: characterId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Character mining ledger
     - GET /v1/characters/{character_id}/mining/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
}, {
  "date" : "2000-01-23",
  "quantity" : 0,
  "type_id" : 1,
  "solar_system_id" : 6
} ]}]
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCharactersCharacterIdMining200Ok]> 
     */
    @MainActor open class func getCharactersCharacterIdMiningWithRequestBuilder(characterId: Int, datasource: Datasource_getCharactersCharacterIdMining? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCharactersCharacterIdMining200Ok]> {
        var path = "/v1/characters/{character_id}/mining/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMining200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationCorporationIdMiningExtractions: String { 
        case tranquility = "tranquility"
    }

    /**
     Moon extraction timers

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationCorporationIdMiningExtractions(corporationId: Int, datasource: Datasource_getCorporationCorporationIdMiningExtractions? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationCorporationIdMiningExtractions200Ok]?,_ error: Error?) -> Void)) {
        getCorporationCorporationIdMiningExtractionsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Moon extraction timers
     - GET /v1/corporation/{corporation_id}/mining/extractions/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
}, {
  "chunk_arrival_time" : "2000-01-23T04:56:07.000+00:00",
  "moon_id" : 0,
  "natural_decay_time" : "2000-01-23T04:56:07.000+00:00",
  "structure_id" : 6,
  "extraction_start_time" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationCorporationIdMiningExtractions200Ok]> 
     */
    @MainActor open class func getCorporationCorporationIdMiningExtractionsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationCorporationIdMiningExtractions? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationCorporationIdMiningExtractions200Ok]> {
        var path = "/v1/corporation/{corporation_id}/mining/extractions/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationCorporationIdMiningExtractions200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationCorporationIdMiningObservers: String { 
        case tranquility = "tranquility"
    }

    /**
     Corporation mining observers

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationCorporationIdMiningObservers(corporationId: Int, datasource: Datasource_getCorporationCorporationIdMiningObservers? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationCorporationIdMiningObservers200Ok]?,_ error: Error?) -> Void)) {
        getCorporationCorporationIdMiningObserversWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Corporation mining observers
     - GET /v1/corporation/{corporation_id}/mining/observers/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
}, {
  "last_updated" : "2000-01-23",
  "observer_id" : 0,
  "observer_type" : "structure"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationCorporationIdMiningObservers200Ok]> 
     */
    @MainActor open class func getCorporationCorporationIdMiningObserversWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationCorporationIdMiningObservers? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationCorporationIdMiningObservers200Ok]> {
        var path = "/v1/corporation/{corporation_id}/mining/observers/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationCorporationIdMiningObservers200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationCorporationIdMiningObserversObserverId: String { 
        case tranquility = "tranquility"
    }

    /**
     Observed corporation mining

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter observerId: (path) A mining observer id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationCorporationIdMiningObserversObserverId(corporationId: Int, observerId: Int64, datasource: Datasource_getCorporationCorporationIdMiningObserversObserverId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationCorporationIdMiningObserversObserverId200Ok]?,_ error: Error?) -> Void)) {
        getCorporationCorporationIdMiningObserversObserverIdWithRequestBuilder(corporationId: corporationId, observerId: observerId, datasource: datasource, ifNoneMatch: ifNoneMatch, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Observed corporation mining
     - GET /v1/corporation/{corporation_id}/mining/observers/{observer_id}/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
}, {
  "last_updated" : "2000-01-23",
  "quantity" : 6,
  "recorded_corporation_id" : 1,
  "type_id" : 5,
  "character_id" : 0
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter observerId: (path) A mining observer id 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationCorporationIdMiningObserversObserverId200Ok]> 
     */
    @MainActor open class func getCorporationCorporationIdMiningObserversObserverIdWithRequestBuilder(corporationId: Int, observerId: Int64, datasource: Datasource_getCorporationCorporationIdMiningObserversObserverId? = nil, ifNoneMatch: String? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationCorporationIdMiningObserversObserverId200Ok]> {
        var path = "/v1/corporation/{corporation_id}/mining/observers/{observer_id}/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let observerIdPreEscape = "\(observerId)"
        let observerIdPostEscape = observerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{observer_id}", with: observerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationCorporationIdMiningObserversObserverId200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCorporationsCorporationIdIndustryJobs: String { 
        case tranquility = "tranquility"
    }

    /**
     List corporation industry jobs

     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter includeCompleted: (query) Whether to retrieve completed corporation industry jobs. Only includes jobs from the past 90 days (optional, default to false)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCorporationsCorporationIdIndustryJobs(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdIndustryJobs? = nil, ifNoneMatch: String? = nil, includeCompleted: Bool? = nil, page: Int? = nil, token: String? = nil, completion: @escaping ((_ data: [GetCorporationsCorporationIdIndustryJobs200Ok]?,_ error: Error?) -> Void)) {
        getCorporationsCorporationIdIndustryJobsWithRequestBuilder(corporationId: corporationId, datasource: datasource, ifNoneMatch: ifNoneMatch, includeCompleted: includeCompleted, page: page, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List corporation industry jobs
     - GET /v1/corporations/{corporation_id}/industry/jobs/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), X-Pages(Int)]
     - examples: [{contentType=application/json, example=[ {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "end_date" : "2000-01-23T04:56:07.000+00:00",
  "successful_runs" : 7,
  "cost" : 2.3021358869347655,
  "licensed_runs" : 4,
  "probability" : 1.0246457,
  "output_location_id" : 1,
  "product_type_id" : 1,
  "location_id" : 7,
  "blueprint_id" : 6,
  "blueprint_type_id" : 5,
  "completed_date" : "2000-01-23T04:56:07.000+00:00",
  "blueprint_location_id" : 1,
  "duration" : 7,
  "installer_id" : 3,
  "job_id" : 2,
  "completed_character_id" : 5,
  "activity_id" : 0,
  "facility_id" : 9,
  "runs" : 6,
  "pause_date" : "2000-01-23T04:56:07.000+00:00",
  "start_date" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
} ]}]
     - parameter corporationId: (path) An EVE corporation ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter includeCompleted: (query) Whether to retrieve completed corporation industry jobs. Only includes jobs from the past 90 days (optional, default to false)
     - parameter page: (query) Which page of results to return (optional, default to 1)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<[GetCorporationsCorporationIdIndustryJobs200Ok]> 
     */
    @MainActor open class func getCorporationsCorporationIdIndustryJobsWithRequestBuilder(corporationId: Int, datasource: Datasource_getCorporationsCorporationIdIndustryJobs? = nil, ifNoneMatch: String? = nil, includeCompleted: Bool? = nil, page: Int? = nil, token: String? = nil) -> RequestBuilder<[GetCorporationsCorporationIdIndustryJobs200Ok]> {
        var path = "/v1/corporations/{corporation_id}/industry/jobs/"
        let corporationIdPreEscape = "\(corporationId)"
        let corporationIdPostEscape = corporationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{corporation_id}", with: corporationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue, 
                        "include_completed": includeCompleted, 
                        "page": page?.encodeToJSON(), 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetCorporationsCorporationIdIndustryJobs200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getIndustryFacilities: String { 
        case tranquility = "tranquility"
    }

    /**
     List industry facilities

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getIndustryFacilities(datasource: Datasource_getIndustryFacilities? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetIndustryFacilities200Ok]?,_ error: Error?) -> Void)) {
        getIndustryFacilitiesWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List industry facilities
     - GET /v1/industry/facilities/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
}, {
  "owner_id" : 6,
  "type_id" : 2,
  "region_id" : 1,
  "facility_id" : 0,
  "solar_system_id" : 5,
  "tax" : 5.637377
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetIndustryFacilities200Ok]> 
     */
    @MainActor open class func getIndustryFacilitiesWithRequestBuilder(datasource: Datasource_getIndustryFacilities? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetIndustryFacilities200Ok]> {
        let path = "/v1/industry/facilities/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetIndustryFacilities200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getIndustrySystems: String { 
        case tranquility = "tranquility"
    }

    /**
     List solar system cost indices

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getIndustrySystems(datasource: Datasource_getIndustrySystems? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetIndustrySystems200Ok]?,_ error: Error?) -> Void)) {
        getIndustrySystemsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List solar system cost indices
     - GET /v1/industry/systems/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
}, {
  "cost_indices" : [ {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  }, {
    "activity" : "copying",
    "cost_index" : 0.8008282
  } ],
  "solar_system_id" : 6
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetIndustrySystems200Ok]> 
     */
    @MainActor open class func getIndustrySystemsWithRequestBuilder(datasource: Datasource_getIndustrySystems? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetIndustrySystems200Ok]> {
        let path = "/v1/industry/systems/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetIndustrySystems200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
