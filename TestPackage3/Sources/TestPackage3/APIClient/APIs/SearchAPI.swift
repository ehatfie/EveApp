//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire

@MainActor open class SearchAPI {
    /**
     * enum for parameter categories
     */
    public enum Categories_getCharactersCharacterIdSearch: String { 
        case agent = "agent"
        case alliance = "alliance"
        case character = "character"
        case constellation = "constellation"
        case corporation = "corporation"
        case faction = "faction"
        case inventoryType = "inventory_type"
        case region = "region"
        case solarSystem = "solar_system"
        case station = "station"
        case structure = "structure"
    }

    /**
     * enum for parameter acceptLanguage
     */
    public enum AcceptLanguage_getCharactersCharacterIdSearch: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdSearch: String { 
        case tranquility = "tranquility"
    }

    /**
     * enum for parameter language
     */
    public enum Language_getCharactersCharacterIdSearch: String { 
        case en = "en"
        case enUs = "en-us"
        case de = "de"
        case fr = "fr"
        case ja = "ja"
        case ru = "ru"
        case zh = "zh"
        case ko = "ko"
        case es = "es"
    }

    /**
     Search on a string

     - parameter categories: (query) Type of entities to search for 
     - parameter characterId: (path) An EVE character ID 
     - parameter search: (query) The string to search on 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter token: (query) Access token to use if unable to set a header (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getCharactersCharacterIdSearch(categories: [String], characterId: Int, search: String, acceptLanguage: AcceptLanguage_getCharactersCharacterIdSearch? = nil, datasource: Datasource_getCharactersCharacterIdSearch? = nil, ifNoneMatch: String? = nil, language: Language_getCharactersCharacterIdSearch? = nil, strict: Bool? = nil, token: String? = nil, completion: @escaping ((_ data: GetCharactersCharacterIdSearchOk?,_ error: Error?) -> Void)) {
        getCharactersCharacterIdSearchWithRequestBuilder(categories: categories, characterId: characterId, search: search, acceptLanguage: acceptLanguage, datasource: datasource, ifNoneMatch: ifNoneMatch, language: language, strict: strict, token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search on a string
     - GET /v3/characters/{character_id}/search/

     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String), Content-Language(String)]
     - examples: [{contentType=application/json, example={
  "agent" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
  "character" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  "alliance" : [ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ],
  "constellation" : [ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
  "corporation" : [ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
  "faction" : [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ],
  "station" : [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ],
  "inventory_type" : [ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 ],
  "region" : [ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 ],
  "structure" : [ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 ],
  "solar_system" : [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 ]
}}]
     - parameter categories: (query) Type of entities to search for 
     - parameter characterId: (path) An EVE character ID 
     - parameter search: (query) The string to search on 
     - parameter acceptLanguage: (header) Language to use in the response (optional, default to en)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter language: (query) Language to use in the response, takes precedence over Accept-Language (optional, default to en)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter token: (query) Access token to use if unable to set a header (optional)

     - returns: RequestBuilder<GetCharactersCharacterIdSearchOk> 
     */
    @MainActor open class func getCharactersCharacterIdSearchWithRequestBuilder(categories: [String], characterId: Int, search: String, acceptLanguage: AcceptLanguage_getCharactersCharacterIdSearch? = nil, datasource: Datasource_getCharactersCharacterIdSearch? = nil, ifNoneMatch: String? = nil, language: Language_getCharactersCharacterIdSearch? = nil, strict: Bool? = nil, token: String? = nil) -> RequestBuilder<GetCharactersCharacterIdSearchOk> {
        var path = "/v3/characters/{character_id}/search/"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{character_id}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "categories": categories, 
                        "datasource": datasource?.rawValue, 
                        "language": language?.rawValue, 
                        "search": search, 
                        "strict": strict, 
                        "token": token
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept-Language": acceptLanguage?.rawValue,
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetCharactersCharacterIdSearchOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
