//
// SovereigntyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


@MainActor open class SovereigntyAPI {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getSovereigntyCampaigns: String { 
        case tranquility = "tranquility"
    }

    /**
     List sovereignty campaigns

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getSovereigntyCampaigns(datasource: Datasource_getSovereigntyCampaigns? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetSovereigntyCampaigns200Ok]?,_ error: Error?) -> Void)) {
        getSovereigntyCampaignsWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sovereignty campaigns
     - GET /v1/sovereignty/campaigns/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
}, {
  "start_time" : "2000-01-23T04:56:07.000+00:00",
  "event_type" : "tcu_defense",
  "defender_id" : 5,
  "attackers_score" : 0.8008282,
  "solar_system_id" : 9,
  "structure_id" : 3,
  "defender_score" : 5.637377,
  "campaign_id" : 6,
  "constellation_id" : 1,
  "participants" : [ {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  }, {
    "score" : 7.0614014,
    "alliance_id" : 2
  } ]
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetSovereigntyCampaigns200Ok]> 
     */
    @MainActor open class func getSovereigntyCampaignsWithRequestBuilder(datasource: Datasource_getSovereigntyCampaigns? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetSovereigntyCampaigns200Ok]> {
        let path = "/v1/sovereignty/campaigns/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetSovereigntyCampaigns200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getSovereigntyMap: String { 
        case tranquility = "tranquility"
    }

    /**
     List sovereignty of systems

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getSovereigntyMap(datasource: Datasource_getSovereigntyMap? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetSovereigntyMap200Ok]?,_ error: Error?) -> Void)) {
        getSovereigntyMapWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sovereignty of systems
     - GET /v1/sovereignty/map/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
}, {
  "alliance_id" : 0,
  "corporation_id" : 6,
  "system_id" : 5,
  "faction_id" : 1
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetSovereigntyMap200Ok]> 
     */
    @MainActor open class func getSovereigntyMapWithRequestBuilder(datasource: Datasource_getSovereigntyMap? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetSovereigntyMap200Ok]> {
        let path = "/v1/sovereignty/map/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetSovereigntyMap200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getSovereigntyStructures: String { 
        case tranquility = "tranquility"
    }

    /**
     List sovereignty structures

     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    @MainActor open class func getSovereigntyStructures(datasource: Datasource_getSovereigntyStructures? = nil, ifNoneMatch: String? = nil, completion: @escaping ((_ data: [GetSovereigntyStructures200Ok]?,_ error: Error?) -> Void)) {
        getSovereigntyStructuresWithRequestBuilder(datasource: datasource, ifNoneMatch: ifNoneMatch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sovereignty structures
     - GET /v1/sovereignty/structures/

     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), ETag(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
}, {
  "structure_type_id" : 5,
  "alliance_id" : 0,
  "vulnerable_start_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerable_end_time" : "2000-01-23T04:56:07.000+00:00",
  "vulnerability_occupancy_level" : 5.637377,
  "solar_system_id" : 6,
  "structure_id" : 1
} ]}]
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter ifNoneMatch: (header) ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)

     - returns: RequestBuilder<[GetSovereigntyStructures200Ok]> 
     */
    @MainActor open class func getSovereigntyStructuresWithRequestBuilder(datasource: Datasource_getSovereigntyStructures? = nil, ifNoneMatch: String? = nil) -> RequestBuilder<[GetSovereigntyStructures200Ok]> {
        let path = "/v1/sovereignty/structures/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "datasource": datasource?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
                        "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetSovereigntyStructures200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
