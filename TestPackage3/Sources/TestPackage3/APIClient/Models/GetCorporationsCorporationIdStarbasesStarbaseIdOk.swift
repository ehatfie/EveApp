//
// GetCorporationsCorporationIdStarbasesStarbaseIdOk.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** 200 ok object */

public struct GetCorporationsCorporationIdStarbasesStarbaseIdOk: Codable {

    public enum Anchor: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    public enum FuelBayTake: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    public enum FuelBayView: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    public enum Offline: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    public enum Online: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    public enum Unanchor: String, Codable { 
        case allianceMember = "alliance_member"
        case configStarbaseEquipmentRole = "config_starbase_equipment_role"
        case corporationMember = "corporation_member"
        case starbaseFuelTechnicianRole = "starbase_fuel_technician_role"
    }
    /** allow_alliance_members boolean */
    public var allowAllianceMembers: Bool
    /** allow_corporation_members boolean */
    public var allowCorporationMembers: Bool
    /** Who can anchor starbase (POS) and its structures */
    public var anchor: Anchor
    /** attack_if_at_war boolean */
    public var attackIfAtWar: Bool
    /** attack_if_other_security_status_dropping boolean */
    public var attackIfOtherSecurityStatusDropping: Bool
    /** Starbase (POS) will attack if target&#x27;s security standing is lower than this value */
    public var attackSecurityStatusThreshold: Float?
    /** Starbase (POS) will attack if target&#x27;s standing is lower than this value */
    public var attackStandingThreshold: Float?
    /** Who can take fuel blocks out of the starbase (POS)&#x27;s fuel bay */
    public var fuelBayTake: FuelBayTake
    /** Who can view the starbase (POS)&#x27;s fule bay. Characters either need to have required role or belong to the starbase (POS) owner&#x27;s corporation or alliance, as described by the enum, all other access settings follows the same scheme */
    public var fuelBayView: FuelBayView
    /** Fuel blocks and other things that will be consumed when operating a starbase (POS) */
    public var fuels: [GetCorporationsCorporationIdStarbasesStarbaseIdFuel]?
    /** Who can offline starbase (POS) and its structures */
    public var offline: Offline
    /** Who can online starbase (POS) and its structures */
    public var online: Online
    /** Who can unanchor starbase (POS) and its structures */
    public var unanchor: Unanchor
    /** True if the starbase (POS) is using alliance standings, otherwise using corporation&#x27;s */
    public var useAllianceStandings: Bool

    public init(allowAllianceMembers: Bool, allowCorporationMembers: Bool, anchor: Anchor, attackIfAtWar: Bool, attackIfOtherSecurityStatusDropping: Bool, attackSecurityStatusThreshold: Float? = nil, attackStandingThreshold: Float? = nil, fuelBayTake: FuelBayTake, fuelBayView: FuelBayView, fuels: [GetCorporationsCorporationIdStarbasesStarbaseIdFuel]? = nil, offline: Offline, online: Online, unanchor: Unanchor, useAllianceStandings: Bool) {
        self.allowAllianceMembers = allowAllianceMembers
        self.allowCorporationMembers = allowCorporationMembers
        self.anchor = anchor
        self.attackIfAtWar = attackIfAtWar
        self.attackIfOtherSecurityStatusDropping = attackIfOtherSecurityStatusDropping
        self.attackSecurityStatusThreshold = attackSecurityStatusThreshold
        self.attackStandingThreshold = attackStandingThreshold
        self.fuelBayTake = fuelBayTake
        self.fuelBayView = fuelBayView
        self.fuels = fuels
        self.offline = offline
        self.online = online
        self.unanchor = unanchor
        self.useAllianceStandings = useAllianceStandings
    }

    public enum CodingKeys: String, CodingKey { 
        case allowAllianceMembers = "allow_alliance_members"
        case allowCorporationMembers = "allow_corporation_members"
        case anchor
        case attackIfAtWar = "attack_if_at_war"
        case attackIfOtherSecurityStatusDropping = "attack_if_other_security_status_dropping"
        case attackSecurityStatusThreshold = "attack_security_status_threshold"
        case attackStandingThreshold = "attack_standing_threshold"
        case fuelBayTake = "fuel_bay_take"
        case fuelBayView = "fuel_bay_view"
        case fuels
        case offline
        case online
        case unanchor
        case useAllianceStandings = "use_alliance_standings"
    }

}
